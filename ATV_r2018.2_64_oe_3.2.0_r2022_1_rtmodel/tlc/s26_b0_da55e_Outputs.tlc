%implements s26_b0_da55e_Outputs "C"

%function OutputsForTID(block, system, tid) Output
%if tid == 0
%assign ::GlobalCurrentTID = 0
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T rtb_Add;
uint8_T rtb_Gain_d;
real_T rtb_Gain;
boolean_T RelationalOperator6;
boolean_T RelationalOperator8;
%closefile localVarDecl
%assign _modelSS = ""

%assign tlcOutputsFcnOfS16B0 = OpaqueTLCBlockFcn("Outputs", 16, 0, 3, 5)
%assign tlcOutputsFcnOfS16B2 = OpaqueTLCBlockFcn("Outputs", 16, 2, 3, 5)
%assign tlcOutputsFcnOfS16B4 = OpaqueTLCBlockFcn("Outputs", 16, 4, 3, 5)
%assign tlcOutputsFcnOfS16B18 = OpaqueTLCBlockFcn("Outputs", 16, 18, 3, 5)
%assign tlcOutputsFcnOfS16B19 = OpaqueTLCBlockFcn("Outputs", 16, 19, 3, 5)
%assign tlcOutputsFcnOfS16B33 = OpaqueTLCBlockFcn("Outputs", 16, 33, 3, 5)
%assign tlcOutputsFcnOfS16B38 = OpaqueTLCBlockFcn("Outputs", 16, 38, 3, 5)
%assign tlcOutputsFcnOfS16B55 = OpaqueTLCBlockFcn("Outputs", 16, 55, 3, 5)
%assign tlcOutputsFcnOfS16B56 = OpaqueTLCBlockFcn("Outputs", 16, 56, 3, 5)
%assign tlcOutputsFcnOfS16B74 = OpaqueTLCBlockFcn("Outputs", 16, 74, 3, 5)
%assign tlcOutputsFcnOfS16B76 = OpaqueTLCBlockFcn("Outputs", 16, 76, 3, 5)
%assign tlcOutputsFcnOfS16B77 = OpaqueTLCBlockFcn("Outputs", 16, 77, 3, 5)
%assign tlcOutputsFcnOfS16B78 = OpaqueTLCBlockFcn("Outputs", 16, 78, 3, 5)
%assign tlcOutputsFcnOfS16B79 = OpaqueTLCBlockFcn("Outputs", 16, 79, 3, 5)
%assign tlcOutputsFcnOfS16B80 = OpaqueTLCBlockFcn("Outputs", 16, 80, 3, 5)
%assign tlcOutputsFcnOfS16B81 = OpaqueTLCBlockFcn("Outputs", 16, 81, 3, 5)
%assign tlcOutputsFcnOfS16B82 = OpaqueTLCBlockFcn("Outputs", 16, 82, 3, 5)
%assign tlcOutputsFcnOfS16B83 = OpaqueTLCBlockFcn("Outputs", 16, 83, 3, 5)
%assign tlcOutputsFcnOfS16B84 = OpaqueTLCBlockFcn("Outputs", 16, 84, 3, 5)
%assign tlcOutputsFcnOfS16B98 = OpaqueTLCBlockFcn("Outputs", 16, 98, 3, 5)
%assign tlcOutputsFcnOfS16B101 = OpaqueTLCBlockFcn("Outputs", 16, 101, 3, 5)
%assign tlcOutputsFcnOfS16B102 = OpaqueTLCBlockFcn("Outputs", 16, 102, 3, 5)
%assign tlcOutputsFcnOfS16B103 = OpaqueTLCBlockFcn("Outputs", 16, 103, 3, 5)
%assign tlcOutputsFcnOfS16B105 = OpaqueTLCBlockFcn("Outputs", 16, 105, 3, 5)
%assign tlcOutputsFcnOfS16B114 = OpaqueTLCBlockFcn("Outputs", 16, 114, 3, 5)
%assign tlcOutputsFcnOfS16B115 = OpaqueTLCBlockFcn("Outputs", 16, 115, 3, 5)
%assign tlcOutputsFcnOfS16B116 = OpaqueTLCBlockFcn("Outputs", 16, 116, 3, 5)
%assign tlcOutputsFcnOfS16B117 = OpaqueTLCBlockFcn("Outputs", 16, 117, 3, 5)
%assign tlcOutputsFcnOfS16B118 = OpaqueTLCBlockFcn("Outputs", 16, 118, 3, 5)
%assign tlcOutputsFcnOfS16B119 = OpaqueTLCBlockFcn("Outputs", 16, 119, 3, 5)
%assign tlcOutputsFcnOfS16B120 = OpaqueTLCBlockFcn("Outputs", 16, 120, 3, 5)
%assign tlcOutputsFcnOfS16B121 = OpaqueTLCBlockFcn("Outputs", 16, 121, 3, 5)
%if !WHITE_SPACE(tlcOutputsFcnOfS16B0)
/* {S!d4390}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput' */
%<tlcOutputsFcnOfS16B0>\
%endif
/* {S!d4392}Gain: '<S6>/Gain' */
rtb_Gain = floor(1000.0 * ATV_B.pai_BasicAnalogInput);
if (rtIsNaN(rtb_Gain) || rtIsInf(rtb_Gain)) {
    rtb_Gain = 0.0;
} else {
    rtb_Gain = fmod(rtb_Gain, 4.294967296E+9);
}
atv_xd1_key_ain = rtb_Gain < 0.0 ? -(int32_T)(uint32_T)-rtb_Gain : (int32_T)(uint32_T)rtb_Gain;
/* {E!d4392}End of Gain: '<S6>/Gain' */

/* {S!d4394}RelationalOperator: '<S26>/Compare' incorporates:
 *  Constant: '<S26>/Constant'
 */
atv_key_signal = (atv_xd1_key_ain > 500);
%if !WHITE_SPACE(tlcOutputsFcnOfS16B2)
/* {S!d4396}S-Function (pdx_digital_input): '<S6>/pdx_DigitalInput' */
%<tlcOutputsFcnOfS16B2>\
%endif
/* {S!d4398}Logic: '<S6>/Logical Operator' */
ATV_B.atv_StartBtn_din = !atv_za3_StartBtn_din;
/* {S!d4402}RateTransition: '<Root>/Rate Transition4' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition4 = ATV_DW.RateTransition4_Buffer0;
    /* {S!d4400}RateTransition: '<Root>/Rate Transition5' */
    ATV_B.RateTransition5 = ATV_DW.RateTransition5_Buffer0;
}
/* {E!d4402}End of RateTransition: '<Root>/Rate Transition4' */

/* {S!d4404}Chart: '<S8>/VSM' */
if (ATV_DW.temporalCounter_i1_m < 127U) {
    ATV_DW.temporalCounter_i1_m++;
}
if (ATV_DW.temporalCounter_i2 < 255U) {
    ATV_DW.temporalCounter_i2++;
}
if (ATV_DW.temporalCounter_i3 < 63U) {
    ATV_DW.temporalCounter_i3++;
}
/* Gateway: loop_10ms/VSM */
/* During: loop_10ms/VSM */
if (ATV_DW.is_active_c3_ATV == 0U) {
    /* Entry: loop_10ms/VSM */
    ATV_DW.is_active_c3_ATV = 1U;
    /* Entry Internal: loop_10ms/VSM */
    /* Transition: '<S30>:4' */
    ATV_DW.is_c3_ATV = ATV_IN_SLEEP;
    /* Entry 'SLEEP': '<S30>:9' */
    atv_state_out = 1U;
    atv_sub_state_out = 0U;
    atv_wakelock_out = false;
    ATV_B.en_inv_gen_out = false;
    atv_en_dcdc_out = false;
} else {
    switch (ATV_DW.is_c3_ATV) {
      case ATV_IN_INIT:
        atv_state_out = 3U;
        atv_wakelock_out = true;
        atv_en_dcdc_out = true;
        /* During 'INIT': '<S30>:5' */
        if (!atv_key_signal) {
            /* Transition: '<S30>:17' */
            ATV_DW.is_c3_ATV = ATV_IN_PRE_SLEEP;
            ATV_DW.temporalCounter_i1_m = 0U;
            /* Entry 'PRE_SLEEP': '<S30>:3' */
            atv_state_out = 2U;
            atv_sub_state_out = 0U;
        } else {
            if (ATV_DW.temporalCounter_i1_m >= 100U) {
                /* Transition: '<S30>:22' */
                ATV_DW.is_c3_ATV = ATV_IN_KEY_ON;
                /* Entry 'KEY_ON': '<S30>:20' */
                /* Entry Internal 'KEY_ON': '<S30>:20' */
                /* Entry Internal 'HV_CTRL': '<S30>:34' */
                /* Transition: '<S30>:82' */
                ATV_DW.is_HV_CTRL = ATV_IN_HV_OFF;
                /* Entry 'HV_OFF': '<S30>:52' */
                /* Entry Internal 'CHG_CTRL': '<S30>:68' */
                /* Transition: '<S30>:67' */
                ATV_DW.is_CHG_CTRL = ATV_IN_CHG_OFF;
                ATV_DW.temporalCounter_i2 = 0U;
                /* Entry 'CHG_OFF': '<S30>:62' */
                ATV_B.chg_ctrl_out = false;
                ATV_B.hvm_ctrl_out = false;
                /* Entry Internal 'HEATER_CTRL': '<S30>:72' */
                /* Transition: '<S30>:74' */
                ATV_DW.is_HEATER_CTRL = ATV_IN_HEATER_OFF;
                /* Entry 'HEATER_OFF': '<S30>:69' */
                ATV_B.heater_ctrl_out = false;
                /* Entry Internal 'DRIVE_ENABLE': '<S30>:85' */
                /* Transition: '<S30>:91' */
                ATV_DW.is_DRIVE_ENABLE = ATV_IN_IDLE;
                /* Entry 'IDLE': '<S30>:87' */
                atv_state_out = 4U;
                ATV_B.en_inv_rear_out = false;
                ATV_B.en_inv_front_out = false;
                /* Entry Internal 'STARTTRIGGER': '<S30>:119' */
                /* Transition: '<S30>:115' */
                ATV_DW.is_STARTTRIGGER = ATV_IN_STARTTRIGGER_OFF;
            }
        }
        break;
      case ATV_IN_KEY_ON:
        %<(SLibCGCallSubFcn("ATV_KEY_ON", [], 3, 5, 0))>;
        break;
      case ATV_IN_PRE_SLEEP:
        atv_state_out = 2U;
        /* During 'PRE_SLEEP': '<S30>:3' */
        if (atv_key_signal) {
            /* Transition: '<S30>:19' */
            ATV_DW.is_c3_ATV = ATV_IN_INIT;
            ATV_DW.temporalCounter_i1_m = 0U;
            /* Entry 'INIT': '<S30>:5' */
            atv_state_out = 3U;
            atv_sub_state_out = 0U;
            atv_wakelock_out = true;
            atv_en_dcdc_out = true;
        } else {
            if (ATV_DW.temporalCounter_i1_m >= 25U) {
                /* Transition: '<S30>:16' */
                ATV_DW.is_c3_ATV = ATV_IN_SLEEP;
                /* Entry 'SLEEP': '<S30>:9' */
                atv_state_out = 1U;
                atv_sub_state_out = 0U;
                atv_wakelock_out = false;
                ATV_B.en_inv_gen_out = false;
                atv_en_dcdc_out = false;
            }
        }
        break;
      default:
        atv_state_out = 1U;
        atv_wakelock_out = false;
        ATV_B.en_inv_gen_out = false;
        atv_en_dcdc_out = false;
        /* During 'SLEEP': '<S30>:9' */
        if (atv_key_signal) {
            /* Transition: '<S30>:12' */
            ATV_DW.is_c3_ATV = ATV_IN_INIT;
            ATV_DW.temporalCounter_i1_m = 0U;
            /* Entry 'INIT': '<S30>:5' */
            atv_state_out = 3U;
            atv_sub_state_out = 0U;
            atv_wakelock_out = true;
            atv_en_dcdc_out = true;
        }
        break;
    }
}
/* {E!d4404}End of Chart: '<S8>/VSM' */
%if !WHITE_SPACE(tlcOutputsFcnOfS16B4)

/* {S!d4406}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage' */
%<tlcOutputsFcnOfS16B4>\
%endif
/* {S!d4414}RateTransition: '<S1>/Rate Transition4' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition4_b = ATV_B.hvm_ctrl_out;
    /* {S!d4408}RateTransition: '<S1>/Rate Transition' */
    ATV_B.RateTransition = ATV_B.hvp_ctrl_out;
    /* {S!d4410}RateTransition: '<S1>/Rate Transition1' */
    ATV_B.RateTransition1 = ATV_B.chg_ctrl_out;
    /* {S!d4412}RateTransition: '<S1>/Rate Transition2' */
    ATV_B.RateTransition2 = ATV_B.heater_ctrl_out;
}
/* {E!d4414}End of RateTransition: '<S1>/Rate Transition4' */

/* {S!d4416}Switch: '<S50>/Switch7' incorporates:
 *  Constant: '<S50>/Constant10'
 *  Constant: '<S50>/Constant9'
 *  Logic: '<S50>/Logical Operator6'
 */
if (!ATV_B.en_inv_rear_out) {
    rtb_Add = 3;
} else {
    rtb_Add = 0;
}
/* {E!d4416}End of Switch: '<S50>/Switch7' */

/* {S!d4418}Sum: '<S50>/Add' incorporates:
 *  Logic: '<S50>/Logical Operator2'
 */
rtb_Add += ATV_B.en_inv_rear_out;
%if !WHITE_SPACE(tlcOutputsFcnOfS16B18)
/* {S!d4420}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput3' */
%<tlcOutputsFcnOfS16B18>\
%endif
/* {S!d4422}Relay: '<S6>/Relay' */
if (atv_xd3_raw_ain >= 3.0) {
    ATV_DW.Relay_Mode = true;
} else {
    if (atv_xd3_raw_ain <= 2.0) {
        ATV_DW.Relay_Mode = false;
    }
}
atv_fs1_in = ATV_DW.Relay_Mode;
/* {E!d4422}End of Relay: '<S6>/Relay' */
%if !WHITE_SPACE(tlcOutputsFcnOfS16B19)

/* {S!d4424}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput1' */
%<tlcOutputsFcnOfS16B19>\
%endif
/* {S!d4430}Switch: '<S12>/Switch' incorporates:
 *  Constant: '<S12>/Constant'
 *  Constant: '<S13>/Lower Limit'
 *  Constant: '<S13>/Upper Limit'
 *  Logic: '<S13>/AND'
 *  RelationalOperator: '<S13>/Lower Test'
 *  RelationalOperator: '<S13>/Upper Test'
 */
if ((0.45 <= atv_xa1_ain_throttle_raw) && (atv_xa1_ain_throttle_raw <= 4.55)) {
    /* {S!d4426}Saturate: '<S12>/Saturation' */
    if (atv_xa1_ain_throttle_raw > 4.5) {
        rtb_Gain = 4.5;
    } else if (atv_xa1_ain_throttle_raw < 0.5) {
        rtb_Gain = 0.5;
    } else {
        rtb_Gain = atv_xa1_ain_throttle_raw;
    }
    /* {E!d4426}End of Saturate: '<S12>/Saturation' */

    /* {S!d4428}Gain: '<S12>/Gain' incorporates:
 *  Constant: '<S12>/Constant1'
 *  Sum: '<S12>/Add'
 */
    rtb_Gain = floor((rtb_Gain - 0.5) * 250.0);
    if (rtIsNaN(rtb_Gain)) {
        atv_throttleX1000 = 0U;
    } else {
        atv_throttleX1000 = (uint16_T)fmod(rtb_Gain, 65536.0);
    }
    /* {E!d4428}End of Gain: '<S12>/Gain' */
} else {
    atv_throttleX1000 = 0U;
}
/* {E!d4430}End of Switch: '<S12>/Switch' */

/* {S!d4381}Outputs for Atomic SubSystem: '<S29>/DBW + REG_BRAKE FORWARD' */
/* {S!d4432}Constant: '<S8>/atvc_mtadd' incorporates:
 *  Constant: '<S8>/atvc_mtawnb'
 */
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[14], "Output",0)
%if SLibCG_SystemFcnArgAccessed("ATV_DBWREG_BRAKEFORWARD",14,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_DBWREG_BRAKEFORWARD", ["%<_modelSS>", "atv_fs1_in", "atv_throttleX1000", "atvc_mtadd", "atvc_mtawnb", "&ATV_B.DBWREG_BRAKEFORWARD_d"], 14, 1, 7, 0, 7, 16)>\


/* {E!d4381}End of Outputs for SubSystem: '<S29>/DBW + REG_BRAKE FORWARD' */
%endif
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[8], "Output",0)

/* {S!d4383}Outputs for Atomic SubSystem: '<S29>/DBW REVERSE' */
%if SLibCG_SystemFcnArgAccessed("ATV_DBWREVERSE",8,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_DBWREVERSE", ["%<_modelSS>", "atv_fs1_in", "atv_throttleX1000", "&ATV_B.DBWREVERSE_b"], 8, 1, 7, 0, 7, 16)>\


/* {E!d4383}End of Outputs for SubSystem: '<S29>/DBW REVERSE' */

%endif
/* {S!d4440}MultiPortSwitch: '<S29>/Multiport Switch3' incorporates:
 *  Constant: '<S29>/Constant4'
 */
switch (rtb_Add) {
  case 1:
    ATV_B.MultiportSwitch3 = ATV_B.DBWREG_BRAKEFORWARD_d.Switch2;
    /* {S!d4436}MultiPortSwitch: '<S29>/Multiport Switch1' */
    ATV_B.MultiportSwitch1 = ATV_B.DBWREG_BRAKEFORWARD_d.Switch;
    break;
  case 2:
    ATV_B.MultiportSwitch3 = ATV_ConstB.DBWREVERSE_b.Constant2;
    /* {S!d4438}MultiPortSwitch: '<S29>/Multiport Switch1' */
    ATV_B.MultiportSwitch1 = ATV_B.DBWREVERSE_b.Cast;
    break;
  default:
    ATV_B.MultiportSwitch3 = 0U;
    /* {S!d4434}MultiPortSwitch: '<S29>/Multiport Switch1' incorporates:
 *  Constant: '<S29>/Constant2'
 *  Constant: '<S29>/Constant4'
 */
    ATV_B.MultiportSwitch1 = 0U;
    break;
}
/* {E!d4440}End of MultiPortSwitch: '<S29>/Multiport Switch3' */
%if !WHITE_SPACE(tlcOutputsFcnOfS16B33)

/* {S!d4442}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage2' incorporates:
 *  Constant: '<S29>/Constant5'
 *  Constant: '<S29>/Constant6'
 */
%<tlcOutputsFcnOfS16B33>\
%endif
/* {S!d4444}Logic: '<S29>/Logical Operator' */
ATV_B.LogicalOperator = !atv_fs1_in;
%if !WHITE_SPACE(tlcOutputsFcnOfS16B38)
/* {S!d4446}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage3' incorporates:
 *  Constant: '<S1>/Constant'
 *  Constant: '<S1>/Constant1'
 *  Constant: '<S8>/fwd'
 *  Constant: '<S8>/rwd'
 */
%<tlcOutputsFcnOfS16B38>\
%endif
/* {S!d4448}Switch: '<S37>/Switch7' incorporates:
 *  Constant: '<S37>/Constant10'
 *  Constant: '<S37>/Constant9'
 *  Logic: '<S37>/Logical Operator6'
 */
if (!ATV_B.en_inv_front_out) {
    rtb_Add = 3;
} else {
    rtb_Add = 0;
}
/* {E!d4448}End of Switch: '<S37>/Switch7' */

/* {S!d4450}Sum: '<S37>/Add' incorporates:
 *  Logic: '<S37>/Logical Operator2'
 */
rtb_Add += ATV_B.en_inv_front_out;
/* {S!d4385}Outputs for Atomic SubSystem: '<S28>/DBW + REG_BRAKE FORWARD' */
/* {S!d4452}Constant: '<S8>/atvc_mtadd' incorporates:
 *  Constant: '<S8>/atvc_mtawnb'
 */
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[14], "Output",0)
%if SLibCG_SystemFcnArgAccessed("ATV_DBWREG_BRAKEFORWARD",14,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_DBWREG_BRAKEFORWARD", ["%<_modelSS>", "atv_fs1_in", "atv_throttleX1000", "atvc_mtadd", "atvc_mtawnb", "&ATV_B.DBWREG_BRAKEFORWARD"], 14, 0, 7, 0, 7, 16)>\


/* {E!d4385}End of Outputs for SubSystem: '<S28>/DBW + REG_BRAKE FORWARD' */
%endif
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[8], "Output",0)

/* {S!d4387}Outputs for Atomic SubSystem: '<S28>/DBW REVERSE' */
%if SLibCG_SystemFcnArgAccessed("ATV_DBWREVERSE",8,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_DBWREVERSE", ["%<_modelSS>", "atv_fs1_in", "atv_throttleX1000", "&ATV_B.DBWREVERSE"], 8, 0, 7, 0, 7, 16)>\


/* {E!d4387}End of Outputs for SubSystem: '<S28>/DBW REVERSE' */

%endif
/* {S!d4460}MultiPortSwitch: '<S28>/Multiport Switch3' incorporates:
 *  Constant: '<S28>/Constant4'
 */
switch (rtb_Add) {
  case 1:
    ATV_B.MultiportSwitch3_n = ATV_B.DBWREG_BRAKEFORWARD.Switch2;
    /* {S!d4456}MultiPortSwitch: '<S28>/Multiport Switch1' */
    ATV_B.MultiportSwitch1_h = ATV_B.DBWREG_BRAKEFORWARD.Switch;
    break;
  case 2:
    ATV_B.MultiportSwitch3_n = 0U;
    /* {S!d4458}MultiPortSwitch: '<S28>/Multiport Switch1' */
    ATV_B.MultiportSwitch1_h = ATV_B.DBWREVERSE.Cast;
    break;
  default:
    ATV_B.MultiportSwitch3_n = 0U;
    /* {S!d4454}MultiPortSwitch: '<S28>/Multiport Switch1' incorporates:
 *  Constant: '<S28>/Constant2'
 *  Constant: '<S28>/Constant4'
 */
    ATV_B.MultiportSwitch1_h = 0U;
    break;
}
/* {E!d4460}End of MultiPortSwitch: '<S28>/Multiport Switch3' */
%if !WHITE_SPACE(tlcOutputsFcnOfS16B55)

/* {S!d4462}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage4' incorporates:
 *  Constant: '<S28>/Constant5'
 *  Constant: '<S28>/Constant6'
 */
%<tlcOutputsFcnOfS16B55>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B56)
/* {S!d4464}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage5' incorporates:
 *  Constant: '<S1>/Constant'
 *  Constant: '<S1>/Constant1'
 *  Constant: '<S8>/fwd'
 *  Constant: '<S8>/rwd'
 */
%<tlcOutputsFcnOfS16B56>\
%endif
/* {S!d4466}RateTransition: '<Root>/Rate Transition6' incorporates:
 *  RateTransition: '<Root>/Rate Transition10'
 *  RateTransition: '<Root>/Rate Transition7'
 *  RateTransition: '<Root>/Rate Transition8'
 */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition6 = ATV_DW.RateTransition6_Buffer0;
    ATV_B.RateTransition7 = ATV_DW.RateTransition7_Buffer0;
    ATV_B.RateTransition10 = ATV_DW.RateTransition10_Buffer0;
    ATV_B.RateTransition8 = ATV_DW.RateTransition8_Buffer0;
}
/* {E!d4466}End of RateTransition: '<Root>/Rate Transition6' */

/* {S!d4468}RelationalOperator: '<S27>/Relational Operator4' */
ATV_B.RelationalOperator4 = (ATV_B.RateTransition10 > 70);
/* {S!d4470}RelationalOperator: '<S27>/Relational Operator5' */
ATV_B.RelationalOperator5 = (ATV_B.RateTransition10 < 60);
/* {S!d4472}RelationalOperator: '<S27>/Relational Operator6' */
RelationalOperator6 = (ATV_B.RateTransition8 > 70);
/* {S!d4474}RateTransition: '<Root>/Rate Transition9' incorporates:
 *  RateTransition: '<Root>/Rate Transition11'
 */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition9 = ATV_DW.RateTransition9_Buffer0;
    ATV_B.RateTransition11 = ATV_DW.RateTransition11_Buffer0;
}
/* {E!d4474}End of RateTransition: '<Root>/Rate Transition9' */

/* {S!d4476}RelationalOperator: '<S27>/Relational Operator8' */
RelationalOperator8 = (ATV_B.RateTransition9 > 40);
/* {S!d4488}Chart: '<S31>/PUMP LOGIC' incorporates:
 *  RelationalOperator: '<S27>/Relational Operator'
 *  RelationalOperator: '<S27>/Relational Operator1'
 *  RelationalOperator: '<S27>/Relational Operator2'
 *  RelationalOperator: '<S27>/Relational Operator3'
 *  RelationalOperator: '<S27>/Relational Operator7'
 *  RelationalOperator: '<S27>/Relational Operator9'
 */
if (ATV_DW.temporalCounter_i1 < 65535U) {
    ATV_DW.temporalCounter_i1++;
}
/* Gateway: loop_10ms/Cooling System1/GestioneImpiantoRaffreddamento/PUMP LOGIC */
/* During: loop_10ms/Cooling System1/GestioneImpiantoRaffreddamento/PUMP LOGIC */
if (ATV_DW.is_active_c6_ATV == 0U) {
    /* Entry: loop_10ms/Cooling System1/GestioneImpiantoRaffreddamento/PUMP LOGIC */
    ATV_DW.is_active_c6_ATV = 1U;
    /* Entry Internal: loop_10ms/Cooling System1/GestioneImpiantoRaffreddamento/PUMP LOGIC */
    /* Entry 'PumpALogic': '<S33>:47' */
    ATV_DW.PumpStA = 0.0;
    /* Entry Internal 'PumpALogic': '<S33>:47' */
    /* Transition: '<S33>:56' */
    ATV_DW.is_PumpALogic = ATV_IN_Off;
    /* {S!d4478}Switch: '<S31>/Switch' */
    /* Entry 'Off': '<S33>:63' */
    ATV_B.Switch = false;
    /* Entry 'PumpBLogic': '<S33>:14' */
    ATV_DW.PumpStB = 0.0;
    /* Entry Internal 'PumpBLogic': '<S33>:14' */
    /* Transition: '<S33>:27' */
    ATV_DW.is_PumpBLogic = ATV_IN_Off;
    ATV_DW.temporalCounter_i1 = 0U;
    /* Entry 'Off': '<S33>:24' */
    atv_dbg_pumpB_out = false;
    rtb_Add = 0;
} else {
    /* During 'PumpALogic': '<S33>:47' */
    if (ATV_DW.is_PumpALogic == ATV_IN_Off) {
        /* {S!d4480}Switch: '<S31>/Switch' */
        ATV_B.Switch = false;
        /* During 'Off': '<S33>:63' */
        if (ATV_DW.PumpStA == 1.0) {
            /* Transition: '<S33>:116' */
            ATV_DW.is_PumpALogic = ATV_IN_Run;
            /* {S!d4482}Switch: '<S31>/Switch' */
            /* Entry 'Run': '<S33>:54' */
            ATV_B.Switch = true;
        } else {
            ATV_DW.PumpStA = %<(SLibCGCallSubFcn("ATV_On", ["ATV_B.RateTransition7 > 40", "ATV_B.RateTransition6 > 70"], 3, 5, 1))>;
        }
    } else {
        /* {S!d4484}Switch: '<S31>/Switch' */
        ATV_B.Switch = true;
        /* During 'Run': '<S33>:54' */
        if (ATV_DW.PumpStA == 0.0) {
            /* Transition: '<S33>:62' */
            ATV_DW.is_PumpALogic = ATV_IN_Off;
            /* {S!d4486}Switch: '<S31>/Switch' */
            /* Entry 'Off': '<S33>:63' */
            ATV_B.Switch = false;
        } else {
            ATV_DW.PumpStA = %<(SLibCGCallSubFcn("ATV_Off", ["ATV_B.RateTransition7 < 30", "ATV_B.RateTransition6 < 60"], 3, 5, 2))>;
        }
    }
    /* During 'PumpBLogic': '<S33>:14' */
    switch (ATV_DW.is_PumpBLogic) {
      case ATV_IN_Off:
        atv_dbg_pumpB_out = false;
        rtb_Add = 0;
        /* During 'Off': '<S33>:24' */
        if (ATV_DW.PumpStB == 1.0) {
            /* Transition: '<S33>:29' */
            ATV_DW.is_PumpBLogic = ATV_IN_Run;
            /* Entry 'Run': '<S33>:28' */
            atv_dbg_pumpB_out = true;
            rtb_Add = 1;
        } else if (ATV_DW.temporalCounter_i1 >= 50000U) {
            /* Transition: '<S33>:32' */
            ATV_DW.is_PumpBLogic = ATV_IN_Run60sec;
            ATV_DW.temporalCounter_i1 = 0U;
            /* Entry 'Run60sec': '<S33>:22' */
            atv_dbg_pumpB_out = true;
            rtb_Add = 1;
        } else {
            ATV_DW.PumpStB = %<(SLibCGCallSubFcn("ATV_On", ["RelationalOperator8", "RelationalOperator6"], 3, 5, 4))>;
        }
        break;
      case ATV_IN_Run:
        atv_dbg_pumpB_out = true;
        rtb_Add = 1;
        /* During 'Run': '<S33>:28' */
        if (ATV_DW.PumpStB == 0.0) {
            /* Transition: '<S33>:25' */
            ATV_DW.is_PumpBLogic = ATV_IN_Off;
            ATV_DW.temporalCounter_i1 = 0U;
            /* Entry 'Off': '<S33>:24' */
            atv_dbg_pumpB_out = false;
            rtb_Add = 0;
        } else {
            ATV_DW.PumpStB = %<(SLibCGCallSubFcn("ATV_Off", ["ATV_B.RateTransition9 < 30", "ATV_B.RateTransition8 < 60"], 3, 5, 3))>;
        }
        break;
      default:
        atv_dbg_pumpB_out = true;
        rtb_Add = 1;
        /* During 'Run60sec': '<S33>:22' */
        if (ATV_DW.PumpStB == 1.0) {
            /* Transition: '<S33>:31' */
            /* Transition: '<S33>:34' */
            ATV_DW.is_PumpBLogic = ATV_IN_Run;
            /* Entry 'Run': '<S33>:28' */
            atv_dbg_pumpB_out = true;
        } else if (ATV_DW.temporalCounter_i1 >= 9000U) {
            /* Transition: '<S33>:26' */
            ATV_DW.is_PumpBLogic = ATV_IN_Off;
            ATV_DW.temporalCounter_i1 = 0U;
            /* Entry 'Off': '<S33>:24' */
            atv_dbg_pumpB_out = false;
            rtb_Add = 0;
        } else {
            ATV_DW.PumpStB = %<(SLibCGCallSubFcn("ATV_On", ["RelationalOperator8", "RelationalOperator6"], 3, 5, 5))>;
        }
        break;
    }
}
/* {E!d4488}End of Chart: '<S31>/PUMP LOGIC' */

/* {S!d4494}RateTransition: '<S1>/Rate Transition3' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition3 = ATV_B.Switch;
    /* {S!d4490}RateTransition: '<S1>/Rate Transition5' */
    ATV_B.RateTransition5_g = atv_dbg_pumpB_out;
    /* {S!d4492}RateTransition: '<Root>/Rate Transition12' */
    ATV_B.RateTransition12 = ATV_DW.RateTransition12_Buffer0;
}
/* {E!d4494}End of RateTransition: '<S1>/Rate Transition3' */

/* {S!d4496}Relay: '<S32>/Relay1' */
if (ATV_B.RateTransition12 >= 50) {
    ATV_DW.Relay1_Mode = true;
} else {
    if (ATV_B.RateTransition12 <= 48) {
        ATV_DW.Relay1_Mode = false;
    }
}
/* {S!d4508}Switch: '<S32>/Switch1' incorporates:
 *  Constant: '<S32>/Ventola spenta'
 *  Logic: '<S32>/Logical Operator'
 *  Relay: '<S32>/Relay1'
 *  Switch: '<S31>/Switch1'
 */
if ((rtb_Add != 0) && ATV_DW.Relay1_Mode) {
    /* {S!d4498}Sum: '<S32>/Add1' incorporates:
 *  Constant: '<S31>/atvc_tempSwitchOnFan'
 */
    rtb_Gain_d = (uint8_T)(ATV_B.RateTransition12 - atvc_tempSwitchOnFan);
    /* {S!d4500}Saturate: '<S32>/Saturation' */
    if (rtb_Gain_d >= 20) {
        rtb_Gain_d = 20U;
    }
    /* {E!d4500}End of Saturate: '<S32>/Saturation' */

    /* {S!d4502}Product: '<S32>/Product' incorporates:
 *  Constant: '<S32>/Constant'
 */
    atv_dbg_FAN_out = (real_T)rtb_Gain_d / 20.0;
    /* {S!d4504}Gain: '<S32>/Gain' incorporates:
 *  Constant: '<S32>/Constant1'
 *  DataTypeConversion: '<S32>/Data Type Conversion'
 *  Switch: '<S34>/Switch2'
 */
    rtb_Gain = 0.01 * (real_T)atvc_dcMinFan;
    /* {S!d4506}Switch: '<S34>/Switch' incorporates:
 *  RelationalOperator: '<S34>/UpperRelop'
 *  Switch: '<S34>/Switch2'
 */
    if (atv_dbg_FAN_out < rtb_Gain) {
        atv_dbg_FAN_out = rtb_Gain;
    }
    /* {E!d4506}End of Switch: '<S34>/Switch' */
} else {
    atv_dbg_FAN_out = 0.0;
}
/* {E!d4508}End of Switch: '<S32>/Switch1' */

/* {S!d4510}Gain: '<S1>/Gain' */
rtb_Gain = floor(100.0 * atv_dbg_FAN_out);
if (rtIsNaN(rtb_Gain) || rtIsInf(rtb_Gain)) {
    rtb_Gain = 0.0;
} else {
    rtb_Gain = fmod(rtb_Gain, 256.0);
}
rtb_Gain_d = (uint8_T)(rtb_Gain < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-rtb_Gain : (int32_T)(uint8_T)rtb_Gain);
/* {E!d4510}End of Gain: '<S1>/Gain' */

/* {S!d4512}RelationalOperator: '<S9>/Compare' incorporates:
 *  Constant: '<S9>/Constant'
 */
RelationalOperator6 = (rtb_Gain_d > 0);
/* {S!d4516}RateTransition: '<S1>/Rate Transition6' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition6_p = RelationalOperator6;
    /* {S!d4514}RateTransition: '<S1>/Rate Transition7' */
    ATV_B.RateTransition7_p = rtb_Gain_d;
}
/* {E!d4516}End of RateTransition: '<S1>/Rate Transition6' */
%if !WHITE_SPACE(tlcOutputsFcnOfS16B74)

/* {S!d4518}S-Function (pdx_digital_output): '<S1>/pdx_DigitalOutput' */
%<tlcOutputsFcnOfS16B74>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B76)
/* {S!d4520}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B76>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B77)
/* {S!d4522}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput1' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B77>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B78)
/* {S!d4524}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput2' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B78>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B79)
/* {S!d4526}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput3' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B79>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B80)
/* {S!d4528}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput4' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B80>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B81)
/* {S!d4530}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput5' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B81>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B82)
/* {S!d4532}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput6' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B82>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B83)
/* {S!d4534}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput7' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B83>\
%endif
/* {S!d4536}Gain: '<S5>/Gain' */
ATV_B.Saturation = 0.01 * atv_dbg_FAN_out;
/* {S!d4542}Saturate: '<S5>/Saturation' */
if (ATV_B.Saturation > 1.0) {
    /* {S!d4538}Gain: '<S5>/Gain' */
    ATV_B.Saturation = 1.0;
} else {
    if (ATV_B.Saturation < 0.0) {
        /* {S!d4540}Gain: '<S5>/Gain' */
        ATV_B.Saturation = 0.0;
    }
}
/* {E!d4542}End of Saturate: '<S5>/Saturation' */
%if !WHITE_SPACE(tlcOutputsFcnOfS16B84)

/* {S!d4544}S-Function (pdx_pwm_output): '<S5>/pdx_PWMOutput' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS16B84>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B98)
/* {S!d4546}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput2' */
%<tlcOutputsFcnOfS16B98>\
%endif
/* {S!d4548}Gain: '<S6>/Gain2' */
rtb_Gain = floor(1000.0 * ATV_B.pai_BasicAnalogInput2);
if (rtIsNaN(rtb_Gain) || rtIsInf(rtb_Gain)) {
    rtb_Gain = 0.0;
} else {
    rtb_Gain = fmod(rtb_Gain, 4.294967296E+9);
}
atv_xe3_ain = rtb_Gain < 0.0 ? -(int32_T)(uint32_T)-rtb_Gain : (int32_T)(uint32_T)rtb_Gain;
/* {E!d4548}End of Gain: '<S6>/Gain2' */
%if !WHITE_SPACE(tlcOutputsFcnOfS16B101)

/* {S!d4550}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput' incorporates:
 *  Constant: '<Root>/Constant1'
 */
%<tlcOutputsFcnOfS16B101>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B102)
/* {S!d4552}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput1' incorporates:
 *  Constant: '<Root>/Constant1'
 */
%<tlcOutputsFcnOfS16B102>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B103)
/* {S!d4554}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput2' incorporates:
 *  Constant: '<Root>/Constant1'
 */
%<tlcOutputsFcnOfS16B103>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B105)
/* {S!d4556}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput3' incorporates:
 *  Constant: '<Root>/Constant'
 */
%<tlcOutputsFcnOfS16B105>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B114)
/* {S!d4558}S-Function (psc_app_build_date): '<S22>/psc_AppBuildDate' */
%<tlcOutputsFcnOfS16B114>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B115)
/* {S!d4560}S-Function (psc_app_version): '<S22>/psc_AppVersion' */
%<tlcOutputsFcnOfS16B115>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B116)
/* {S!d4562}S-Function (psc_boot_build_date): '<S23>/psc_BootBuildDate' */
%<tlcOutputsFcnOfS16B116>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B117)
/* {S!d4564}S-Function (psc_boot_version): '<S23>/psc_BootVersion' */
%<tlcOutputsFcnOfS16B117>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B118)
/* {S!d4566}S-Function (psc_prg_build_date): '<S24>/psc_PrgBuildDate' */
%<tlcOutputsFcnOfS16B118>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B119)
/* {S!d4568}S-Function (psc_prg_version): '<S24>/psc_PrgVersion' */
%<tlcOutputsFcnOfS16B119>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B120)
/* {S!d4570}S-Function (psc_platform_build_date): '<S25>/psc_PlatformBuildDate' */
%<tlcOutputsFcnOfS16B120>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B121)
/* {S!d4572}S-Function (psc_platform_version): '<S25>/psc_PlatformVersion' */
%<tlcOutputsFcnOfS16B121>\
%endif
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutput0LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 1
%assign ::GlobalCurrentTID = 1
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%assign _modelSS = ""

%assign tlcOutputsFcnOfS16B5 = OpaqueTLCBlockFcn("Outputs", 16, 5, 3, 6)
%assign tlcOutputsFcnOfS16B73 = OpaqueTLCBlockFcn("Outputs", 16, 73, 3, 6)
%assign tlcOutputsFcnOfS16B85 = OpaqueTLCBlockFcn("Outputs", 16, 85, 3, 6)
%assign tlcOutputsFcnOfS16B89 = OpaqueTLCBlockFcn("Outputs", 16, 89, 3, 6)
%assign tlcOutputsFcnOfS16B99 = OpaqueTLCBlockFcn("Outputs", 16, 99, 3, 6)
%if !WHITE_SPACE(tlcOutputsFcnOfS16B5)
/* S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage1' */
%<tlcOutputsFcnOfS16B5>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B73)
/* S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage6' */
%<tlcOutputsFcnOfS16B73>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B85)
/* S-Function (pcx_candb_receive_message): '<S3>/pcx_CANdb_ReceiveMessage' */
%<tlcOutputsFcnOfS16B85>\
%endif
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[0], "Output",1)
/* Chart: '<S3>/Chart' */
%if SLibCG_SystemFcnArgAccessed("ATV_Chart",0,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_Chart", ["%<_modelSS>", "ATV_B.pcx_CANdb_ReceiveMessage_o2", "&ATV_B.sf_Chart", "&ATV_DW.sf_Chart"], 0, 0, 7, 1, 7, 16)>\


%endif
/* Switch: '<S3>/Switch1' */
atv_v_dbg_chg_req = (ATV_B.sf_Chart.out && (ATV_B.pcx_CANdb_ReceiveMessage_o5 != 0.0));
/* Switch: '<S3>/Switch2' */
atv_v_dbg_heater_req = (ATV_B.sf_Chart.out && (ATV_B.pcx_CANdb_ReceiveMessage_o6 != 0.0));
%if !WHITE_SPACE(tlcOutputsFcnOfS16B89)
/* S-Function (pcx_candb_receive_message): '<S4>/pcx_CANdb_ReceiveMessage' */
%<tlcOutputsFcnOfS16B89>\
%endif
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[0], "Output",1)
/* Chart: '<S4>/Chart' */
%if SLibCG_SystemFcnArgAccessed("ATV_Chart",0,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_Chart", ["%<_modelSS>", "ATV_B.pcx_CANdb_ReceiveMessage_o2_d", "&ATV_B.sf_Chart_b", "&ATV_DW.sf_Chart_b"], 0, 1, 7, 1, 7, 16)>\


%endif
/* Switch: '<S4>/Switch' */
ATV_B.atv_v_dbg_T_FMot = 0U;
/* Switch: '<S4>/Switch1' */
ATV_B.atv_v_dbg_T_FInv = 0U;
/* Switch: '<S4>/Switch2' */
ATV_B.atv_v_dbg_T_RMot = 0U;
/* Switch: '<S4>/Switch3' */
ATV_B.atv_v_dbg_T_RInv = 0U;
/* Switch: '<S4>/Switch4' */
ATV_B.atv_v_dbg_T_GMot = 0U;
/* Switch: '<S4>/Switch5' */
ATV_B.atv_v_dbg_T_GInv = 0U;
/* Switch: '<S4>/Switch6' */
ATV_B.atv_v_dbg_T_Rad = 0U;
%if !WHITE_SPACE(tlcOutputsFcnOfS16B99)
/* S-Function (pcx_candb_receive_message): '<S2>/pcx_CANdb_ReceiveMessage' */
%<tlcOutputsFcnOfS16B99>\
%endif
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutput1LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 2
%assign ::GlobalCurrentTID = 2
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%assign tlcOutputsFcnOfS16B109 = OpaqueTLCBlockFcn("Outputs", 16, 109, 3, 7)
%assign tlcOutputsFcnOfS16B110 = OpaqueTLCBlockFcn("Outputs", 16, 110, 3, 7)
%assign tlcOutputsFcnOfS16B111 = OpaqueTLCBlockFcn("Outputs", 16, 111, 3, 7)
%assign tlcOutputsFcnOfS16B112 = OpaqueTLCBlockFcn("Outputs", 16, 112, 3, 7)
%assign tlcOutputsFcnOfS16B113 = OpaqueTLCBlockFcn("Outputs", 16, 113, 3, 7)
%if !WHITE_SPACE(tlcOutputsFcnOfS16B109)
/* S-Function (psc_cpu_loading): '<S21>/psc_CpuLoading1' */
%<tlcOutputsFcnOfS16B109>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B110)
/* S-Function (psc_stack_used): '<S21>/psc_StackUsed' */
%<tlcOutputsFcnOfS16B110>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B111)
/* S-Function (pkn_task_duration): '<S21>/pkn_TaskDuration1' */
%<tlcOutputsFcnOfS16B111>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B112)
/* S-Function (psc_cpu_loading): '<S21>/psc_CpuLoading2' */
%<tlcOutputsFcnOfS16B112>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS16B113)
/* S-Function (pkn_task_duration): '<S21>/pkn_TaskDuration2' */
%<tlcOutputsFcnOfS16B113>\
%endif
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutput2LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
%function OutputsFcnProtoTypeForTID(block, system, tid) Output
%if tid == 0
%assign ::GlobalCurrentTID = 0
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs0(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(3, 5, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 1
%assign ::GlobalCurrentTID = 1
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs1(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(3, 6, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 2
%assign ::GlobalCurrentTID = 2
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs2(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(3, 7, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction

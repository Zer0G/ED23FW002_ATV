%function CGIRBlockRegisterFixPointFunctions() void
%if !ISFIELD(FixPtUtils,"look1_iflf_binlxpw")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_iflf_binlxpw",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real32_T look1_iflf_binlxpw(real32_T u0, const real32_T bp0[], const real32_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real32_T look1_iflf_binlxpw(real32_T u0, const real32_T bp0[], const real32_T table[], uint32_T maxIndex)
{
    real32_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Column-major Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear point-slope'
   Extrapolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex - 1U;
        frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
    }
    /* Column-major Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_iflf_binlxpw",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_iflf_binlxpw", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_iflf_binlxpw", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_iflf_binlxpw")


%if !ISFIELD(FixPtUtils,"look1_tu8Dd_binlcpw")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_tu8Dd_binlcpw",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern uint8_T look1_tu8Dd_binlcpw(real_T u0, const real_T bp0[], const uint8_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
uint8_T look1_tu8Dd_binlcpw(real_T u0, const real_T bp0[], const uint8_T table[], uint32_T maxIndex)
{
    real_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Column-major Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear point-slope'
   Extrapolation method: 'Clip'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Clip'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = 0.0;
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex - 1U;
        frac = 1.0;
    }
    /* Column-major Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    frac *= (real_T)table[iLeft + 1U] - (real_T)table[iLeft];
    if (frac < 0.0) {
        frac = ceil(frac);
    } else {
        frac = floor(frac);
    }
    if (rtIsNaN(frac) || rtIsInf(frac)) {
        frac = 0.0;
    } else {
        frac = fmod(frac, 256.0);
    }
    return (uint8_T)((uint32_T)(uint8_T)(frac < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-frac : (int32_T)(uint8_T)frac) + table[iLeft]);
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<LibAddtoSharedUtilsIncludes("<math.h>")>
%<LibAddtoSharedUtilsIncludes("rt_nonfinite.h")>
%<SLibDumpUtilsSourceCode("look1_tu8Dd_binlcpw",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_tu8Dd_binlcpw", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_tu8Dd_binlcpw", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_tu8Dd_binlcpw")


%if !ISFIELD(FixPtUtils,"look1_binlcapw")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_binlcapw",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real_T look1_binlcapw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real_T look1_binlcapw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
    real_T y;
    real_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Column-major Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear point-slope'
   Extrapolation method: 'Clip'
   Use last breakpoint for index at or above upper limit: 'on'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Clip'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'on'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = 0.0;
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex;
        frac = 0.0;
    }
    /* Column-major Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'on'
   Overflow mode: 'portable wrapping'
 */
    if (iLeft == maxIndex) {
        y = table[iLeft];
    } else {
        y = (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
    }
    return y;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_binlcapw",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlcapw", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlcapw", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_binlcapw")


%if !ISFIELD(FixPtUtils,"look1_is16bdtd_binlcpw")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_is16bdtd_binlcpw",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real_T look1_is16bdtd_binlcpw(int16_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real_T look1_is16bdtd_binlcpw(int16_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
    real_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Column-major Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear point-slope'
   Extrapolation method: 'Clip'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Clip'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 < bp0[0U]) {
        iLeft = 0U;
        frac = 0.0;
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = ((real_T)u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex - 1U;
        frac = 1.0;
    }
    /* Column-major Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_is16bdtd_binlcpw",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_is16bdtd_binlcpw", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_is16bdtd_binlcpw", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_is16bdtd_binlcpw")


%if !ISFIELD(FixPtUtils,"look1_binlcpw")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_binlcpw",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real_T look1_binlcpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real_T look1_binlcpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
    real_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Column-major Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear point-slope'
   Extrapolation method: 'Clip'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Clip'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = 0.0;
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex - 1U;
        frac = 1.0;
    }
    /* Column-major Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_binlcpw",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlcpw", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlcpw", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_binlcpw")


%if !ISFIELD(FixPtUtils,"sMultiWordMul")
%assign tmpRet = SETFIELD(FixPtUtils,"sMultiWordMul",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void sMultiWordMul(const uint32_T u1[], int32_T n1, const uint32_T u2[], int32_T n2, uint32_T y[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void sMultiWordMul(const uint32_T u1[], int32_T n1, const uint32_T u2[], int32_T n2, uint32_T y[], int32_T n)
{
    int32_T i;
    int32_T j;
    int32_T k;
    int32_T nj;
    uint32_T u1i;
    uint32_T yk;
    uint32_T a1;
    uint32_T a0;
    uint32_T b1;
    uint32_T w10;
    uint32_T w01;
    uint32_T cb;
    boolean_T isNegative1;
    boolean_T isNegative2;
    uint32_T cb1;
    uint32_T cb2;
    isNegative1 = ((u1[n1 - 1] & 2147483648U) != 0U);
    isNegative2 = ((u2[n2 - 1] & 2147483648U) != 0U);
    cb1 = 1U;
    /* Initialize output to zero */
    for (k = 0; k < n; k++) {
        y[k] = 0U;
    }
    for (i = 0; i < n1; i++) {
        cb = 0U;
        u1i = u1[i];
        if (isNegative1) {
            u1i = ~u1i + cb1;
            cb1 = (uint32_T)(u1i < cb1);
        }
        a1 = u1i >> 16U;
        a0 = u1i & 65535U;
        cb2 = 1U;
        k = n - i;
        nj = n2 <= k ? n2 : k;
        k = i;
        for (j = 0; j < nj; j++) {
            yk = y[k];
            u1i = u2[j];
            if (isNegative2) {
                u1i = ~u1i + cb2;
                cb2 = (uint32_T)(u1i < cb2);
            }
            b1 = u1i >> 16U;
            u1i &= 65535U;
            w10 = a1 * u1i;
            w01 = a0 * b1;
            yk += cb;
            cb = (uint32_T)(yk < cb);
            u1i *= a0;
            yk += u1i;
            cb += (yk < u1i);
            u1i = w10 << 16U;
            yk += u1i;
            cb += (yk < u1i);
            u1i = w01 << 16U;
            yk += u1i;
            cb += (yk < u1i);
            y[k] = yk;
            cb += w10 >> 16U;
            cb += w01 >> 16U;
            cb += a1 * b1;
            k++;
        }
        if (k < n) {
            y[k] = cb;
        }
    }
    /* Apply sign */
    if (isNegative1 != isNegative2) {
        cb = 1U;
        for (k = 0; k < n; k++) {
            yk = ~y[k] + cb;
            y[k] = yk;
            cb = (uint32_T)(yk < cb);
        }
    }
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("sMultiWordMul",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordMul", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordMul", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"sMultiWordMul")


%if !ISFIELD(FixPtUtils,"MultiWord2sLong")
%assign tmpRet = SETFIELD(FixPtUtils,"MultiWord2sLong",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern int32_T MultiWord2sLong(const uint32_T u[]);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
int32_T MultiWord2sLong(const uint32_T u[])
{
    return (int32_T)u[0];
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("MultiWord2sLong",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWord2sLong", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWord2sLong", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"MultiWord2sLong")


%if !ISFIELD(FixPtUtils,"sMultiWordDivFloor")
%assign tmpRet = SETFIELD(FixPtUtils,"sMultiWordDivFloor",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void sMultiWordDivFloor(const uint32_T u1[], int32_T n1, const uint32_T u2[], int32_T n2, uint32_T y1[], int32_T m1, uint32_T y2[], int32_T m2, uint32_T t1[], int32_T l1, uint32_T t2[], int32_T l2);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void sMultiWordDivFloor(const uint32_T u1[], int32_T n1, const uint32_T u2[], int32_T n2, uint32_T y1[], int32_T m1, uint32_T y2[], int32_T m2, uint32_T t1[], int32_T l1, uint32_T t2[], int32_T l2)
{
    boolean_T numNeg;
    boolean_T denNeg;
    numNeg = ((u1[n1 - 1] & 2147483648U) != 0U);
    denNeg = ((u2[n2 - 1] & 2147483648U) != 0U);
    if (numNeg) {
        MultiWordNeg(u1, t1, n1);
    } else {
        sMultiWord2MultiWord(u1, n1, t1, l1);
    }
    if (denNeg) {
        MultiWordNeg(u2, t2, n2);
    } else {
        sMultiWord2MultiWord(u2, n2, t2, l2);
    }
    if (uMultiWordDiv(t1, l1, t2, l2, y1, m1, y2, m2) < 0) {
        if (numNeg) {
            MultiWordSetSignedMin(y1, m1);
        } else {
            MultiWordSetSignedMax(y1, m1);
        }
    } else {
        if ((boolean_T)(numNeg ^ denNeg)) {
            if (MultiWord2Bool(y2, m2)) {
                uMultiWordInc(y1, m1);
            }
            MultiWordNeg(y1, y1, m1);
        }
    }
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("sMultiWordDivFloor",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordDivFloor", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordDivFloor", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"sMultiWordDivFloor")


%if !ISFIELD(FixPtUtils,"MultiWordNeg")
%assign tmpRet = SETFIELD(FixPtUtils,"MultiWordNeg",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void MultiWordNeg(const uint32_T u1[], uint32_T y[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void MultiWordNeg(const uint32_T u1[], uint32_T y[], int32_T n)
{
    uint32_T yi;
    uint32_T carry = 1U;
    int32_T i;
    for (i = 0; i < n; i++) {
        yi = ~u1[i] + carry;
        y[i] = yi;
        carry = (uint32_T)(yi < carry);
    }
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("MultiWordNeg",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWordNeg", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWordNeg", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"MultiWordNeg")


%if !ISFIELD(FixPtUtils,"sMultiWord2MultiWord")
%assign tmpRet = SETFIELD(FixPtUtils,"sMultiWord2MultiWord",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void sMultiWord2MultiWord(const uint32_T u1[], int32_T n1, uint32_T y[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void sMultiWord2MultiWord(const uint32_T u1[], int32_T n1, uint32_T y[], int32_T n)
{
    uint32_T u1i;
    int32_T nm;
    int32_T i;
    nm = n1 < n ? n1 : n;
    for (i = 0; i < nm; i++) {
        y[i] = u1[i];
    }
    if (n > n1) {
        u1i = (u1[n1 - 1] & 2147483648U) != 0U ? MAX_uint32_T : 0U;
        for (i = nm; i < n; i++) {
            y[i] = u1i;
        }
    }
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("sMultiWord2MultiWord",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWord2MultiWord", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWord2MultiWord", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"sMultiWord2MultiWord")


%if !ISFIELD(FixPtUtils,"MultiWordSetSignedMin")
%assign tmpRet = SETFIELD(FixPtUtils,"MultiWordSetSignedMin",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void MultiWordSetSignedMin(uint32_T y[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void MultiWordSetSignedMin(uint32_T y[], int32_T n)
{
    int32_T i;
    int32_T n1;
    n1 = n - 1;
    for (i = 0; i < n1; i++) {
        y[i] = 0U;
    }
    y[n1] = 2147483648U;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("MultiWordSetSignedMin",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWordSetSignedMin", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWordSetSignedMin", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"MultiWordSetSignedMin")


%if !ISFIELD(FixPtUtils,"MultiWordSetSignedMax")
%assign tmpRet = SETFIELD(FixPtUtils,"MultiWordSetSignedMax",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void MultiWordSetSignedMax(uint32_T y[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void MultiWordSetSignedMax(uint32_T y[], int32_T n)
{
    int32_T i;
    int32_T n1;
    n1 = n - 1;
    for (i = 0; i < n1; i++) {
        y[i] = MAX_uint32_T;
    }
    y[n1] = 2147483647U;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("MultiWordSetSignedMax",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWordSetSignedMax", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWordSetSignedMax", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"MultiWordSetSignedMax")


%if !ISFIELD(FixPtUtils,"uMultiWordInc")
%assign tmpRet = SETFIELD(FixPtUtils,"uMultiWordInc",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void uMultiWordInc(uint32_T y[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void uMultiWordInc(uint32_T y[], int32_T n)
{
    uint32_T yi;
    uint32_T carry = 1U;
    int32_T i;
    for (i = 0; i < n; i++) {
        yi = y[i] + carry;
        y[i] = yi;
        carry = (uint32_T)(yi < carry);
    }
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("uMultiWordInc",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("uMultiWordInc", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("uMultiWordInc", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"uMultiWordInc")


%if !ISFIELD(FixPtUtils,"MultiWord2Bool")
%assign tmpRet = SETFIELD(FixPtUtils,"MultiWord2Bool",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern boolean_T MultiWord2Bool(const uint32_T u[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
boolean_T MultiWord2Bool(const uint32_T u[], int32_T n)
{
    boolean_T y;
    int32_T i;
    y = false;
    i = 0;
    while ((i < n) && (!y)) {
        if (u[i] != 0U) {
            y = true;
        }
        i++;
    }
    return y;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("MultiWord2Bool",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWord2Bool", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("MultiWord2Bool", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"MultiWord2Bool")


%if !ISFIELD(FixPtUtils,"uMultiWordDiv")
%assign tmpRet = SETFIELD(FixPtUtils,"uMultiWordDiv",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern int32_T uMultiWordDiv(uint32_T a[], int32_T na, uint32_T b[], int32_T nb, uint32_T q[], int32_T nq, uint32_T r[], int32_T nr);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
int32_T uMultiWordDiv(uint32_T a[], int32_T na, uint32_T b[], int32_T nb, uint32_T q[], int32_T nq, uint32_T r[], int32_T nr)
{
    int32_T y;
    int32_T nza;
    int32_T nzb;
    int32_T na1;
    int32_T nb1;
    uint32_T kba;
    uint32_T kbb;
    uint32_T nba;
    uint32_T nbb;
    uint32_T kbs;
    uint32_T nbq;
    uint32_T tnb;
    int32_T tpi;
    uint32_T t;
    uint32_T mask;
    uint32_T ak;
    uint32_T bk;
    int32_T ka;
    int32_T kr;
    nzb = nb;
    tpi = nb - 1;
    while ((nzb > 0) && (b[tpi] == 0U)) {
        nzb--;
        tpi--;
    }
    if (nzb > 0) {
        nza = na;
        for (tpi = 0; tpi < nq; tpi++) {
            q[tpi] = 0U;
        }
        tpi = na - 1;
        while ((nza > 0) && (a[tpi] == 0U)) {
            nza--;
            tpi--;
        }
        if ((nza > 0) && (nza >= nzb)) {
            nb1 = nzb - 1;
            na1 = nza - 1;
            for (kr = 0; kr < nr; kr++) {
                r[kr] = 0U;
            }
            /* Quick return if dividend and divisor fit into single word. */
            if (nza == 1) {
                ak = a[0];
                bk = b[0];
                nbq = ak / bk;
                q[0] = nbq;
                r[0] = ak - nbq * bk;
                y = 7;
            } else {
                /* Remove leading zeros from both, dividend and divisor. */
                kbb = 1U;
                t = b[nb1] >> 1U;
                while (t != 0U) {
                    kbb++;
                    t >>= 1U;
                }
                kba = 1U;
                t = a[na1] >> 1U;
                while (t != 0U) {
                    kba++;
                    t >>= 1U;
                }
                /* Quick return if quotient is zero. */
                if ((nza > nzb) || (kba >= kbb)) {
                    nba = ((uint32_T)na1 << 5) + kba;
                    nbb = ((uint32_T)nb1 << 5) + kbb;
                    /* Normalize b. */
                    if (kbb != 32U) {
                        bk = b[nb1];
                        kbs = 32U - kbb;
                        for (tpi = nb1; tpi > 0; tpi--) {
                            t = bk << kbs;
                            bk = b[tpi - 1];
                            t |= bk >> kbb;
                            b[tpi] = t;
                        }
                        b[tpi] = bk << kbs;
                        mask = ~((1U << kbs) - 1U);
                    } else {
                        mask = MAX_uint32_T;
                    }
                    /* Initialize quotient to zero. */
                    tnb = 0U;
                    y = 0;
                    /* Until exit conditions have been met, do */
                    do {
                        /* Normalize a */
                        if (kba != 32U) {
                            kbs = 32U - kba;
                            tnb += kbs;
                            ak = a[na1];
                            for (ka = na1; ka > 0; ka--) {
                                t = ak << kbs;
                                ak = a[ka - 1];
                                t |= ak >> kba;
                                a[ka] = t;
                            }
                            a[ka] = ak << kbs;
                        }
                        /* Compare b against the a. */
                        ak = a[na1];
                        bk = b[nb1];
                        if (((nb1 == 0 ? mask : MAX_uint32_T) & ak) == bk) {
                            kr = 0;
                            ka = na1;
                            tpi = nb1;
                            while ((kr == 0) && (tpi > 0)) {
                                ka--;
                                ak = a[ka];
                                tpi--;
                                bk = b[tpi];
                                if (((tpi == 0 ? mask : MAX_uint32_T) & ak) != bk) {
                                    kr = ak > bk ? 1 : -1;
                                }
                            }
                        } else {
                            kr = ak > bk ? 1 : -1;
                        }
                        /* If the remainder in a is still greater or equal to b, subtract normalized divisor from a. */
                        if ((kr >= 0) || (nba > nbb)) {
                            nbq = nba - nbb;
                            /* If the remainder and the divisor are equal, set remainder to zero. */
                            if (kr == 0) {
                                ka = na1;
                                for (tpi = nb1; tpi > 0; tpi--) {
                                    a[ka] = 0U;
                                    ka--;
                                }
                                a[ka] -= b[tpi];
                            } else {
                                /* Otherwise, subtract the divisor from the remainder */
                                if (kr < 0) {
                                    ak = a[na1];
                                    kba = 31U;
                                    for (ka = na1; ka > 0; ka--) {
                                        t = ak << 1U;
                                        ak = a[ka - 1];
                                        t |= ak >> 31U;
                                        a[ka] = t;
                                    }
                                    a[ka] = ak << 1U;
                                    tnb++;
                                    nbq--;
                                }
                                kbs = 0U;
                                ka = na1 - nb1;
                                for (tpi = 0; tpi < nzb; tpi++) {
                                    bk = b[tpi];
                                    t = a[ka];
                                    ak = (t - bk) - kbs;
                                    kbs = kbs != 0U ? (uint32_T)(ak >= t) : (uint32_T)(ak > t);
                                    a[ka] = ak;
                                    ka++;
                                }
                            }
                            /* Update the quotient. */
                            tpi = (int32_T)(nbq >> 5);
                            q[tpi] |= 1U << (nbq - ((uint32_T)tpi << 5));
                            /* Remove leading zeros from the remainder and check whether the exit conditions have been met. */
                            tpi = na1;
                            while ((nza > 0) && (a[tpi] == 0U)) {
                                nza--;
                                tpi--;
                            }
                            if (nza >= nzb) {
                                na1 = nza - 1;
                                kba = 1U;
                                t = a[na1] >> 1U;
                                while (t != 0U) {
                                    kba++;
                                    t >>= 1U;
                                }
                                nba = (((uint32_T)na1 << 5) + kba) - tnb;
                                if (nba < nbb) {
                                    y = 2;
                                }
                            } else if (nza == 0) {
                                y = 1;
                            } else {
                                na1 = nza - 1;
                                y = 4;
                            }
                        } else {
                            y = 3;
                        }
                    } while (y == 0);
                    /* Return the remainder. */
                    if (y == 1) {
                        r[0] = a[0];
                    } else {
                        tpi = (int32_T)(tnb >> 5);
                        nbq = tnb - ((uint32_T)tpi << 5);
                        if (nbq == 0U) {
                            ka = tpi;
                            for (kr = 0; kr <= nb1; kr++) {
                                r[kr] = a[ka];
                                ka++;
                            }
                        } else {
                            kbs = 32U - nbq;
                            ak = a[tpi];
                            kr = 0;
                            for (ka = tpi + 1; ka <= na1; ka++) {
                                t = ak >> nbq;
                                ak = a[ka];
                                t |= ak << kbs;
                                r[kr] = t;
                                kr++;
                            }
                            r[kr] = ak >> nbq;
                        }
                    }
                    /* Restore b. */
                    if (kbb != 32U) {
                        bk = b[0];
                        kbs = 32U - kbb;
                        for (tpi = 0; tpi < nb1; tpi++) {
                            t = bk >> kbs;
                            bk = b[tpi + 1];
                            t |= bk << kbb;
                            b[tpi] = t;
                        }
                        b[tpi] = bk >> kbs;
                    }
                } else {
                    for (kr = 0; kr < nr; kr++) {
                        r[kr] = a[kr];
                    }
                    y = 6;
                }
            }
        } else {
            for (kr = 0; kr < nr; kr++) {
                r[kr] = a[kr];
            }
            y = 5;
        }
    } else {
        y = -1;
    }
    return y;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("uMultiWordDiv",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("uMultiWordDiv", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("uMultiWordDiv", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"uMultiWordDiv")


%if !ISFIELD(FixPtUtils,"sLong2MultiWord")
%assign tmpRet = SETFIELD(FixPtUtils,"sLong2MultiWord",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void sLong2MultiWord(int32_T u, uint32_T y[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void sLong2MultiWord(int32_T u, uint32_T y[], int32_T n)
{
    uint32_T yi;
    int32_T i;
    y[0] = (uint32_T)u;
    yi = u < 0 ? MAX_uint32_T : 0U;
    for (i = 1; i < n; i++) {
        y[i] = yi;
    }
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("sLong2MultiWord",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("sLong2MultiWord", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("sLong2MultiWord", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"sLong2MultiWord")


%if !ISFIELD(FixPtUtils,"sMultiWordGe")
%assign tmpRet = SETFIELD(FixPtUtils,"sMultiWordGe",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern boolean_T sMultiWordGe(const uint32_T u1[], const uint32_T u2[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
boolean_T sMultiWordGe(const uint32_T u1[], const uint32_T u2[], int32_T n)
{
    return sMultiWordCmp(u1, u2, n) >= 0;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("sMultiWordGe",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordGe", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordGe", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"sMultiWordGe")


%if !ISFIELD(FixPtUtils,"sMultiWordCmp")
%assign tmpRet = SETFIELD(FixPtUtils,"sMultiWordCmp",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern int32_T sMultiWordCmp(const uint32_T u1[], const uint32_T u2[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
int32_T sMultiWordCmp(const uint32_T u1[], const uint32_T u2[], int32_T n)
{
    int32_T y;
    uint32_T su1;
    uint32_T su2;
    int32_T i;
    su1 = u1[n - 1] & 2147483648U;
    su2 = u2[n - 1] & 2147483648U;
    if ((su1 ^ su2) != 0U) {
        y = su1 != 0U ? -1 : 1;
    } else {
        y = 0;
        i = n;
        while ((y == 0) && (i > 0)) {
            i--;
            su1 = u1[i];
            su2 = u2[i];
            if (su1 != su2) {
                y = su1 > su2 ? 1 : -1;
            }
        }
    }
    return y;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("sMultiWordCmp",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordCmp", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordCmp", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"sMultiWordCmp")


%if !ISFIELD(FixPtUtils,"sMultiWordLe")
%assign tmpRet = SETFIELD(FixPtUtils,"sMultiWordLe",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern boolean_T sMultiWordLe(const uint32_T u1[], const uint32_T u2[], int32_T n);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
boolean_T sMultiWordLe(const uint32_T u1[], const uint32_T u2[], int32_T n)
{
    return sMultiWordCmp(u1, u2, n) <= 0;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("sMultiWordLe",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordLe", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("sMultiWordLe", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"sMultiWordLe")


%if !ISFIELD(FixPtUtils,"mul_wide_s32")
%assign tmpRet = SETFIELD(FixPtUtils,"mul_wide_s32",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern void mul_wide_s32(int32_T in0, int32_T in1, uint32_T *ptrOutBitsHi, uint32_T *ptrOutBitsLo);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
void mul_wide_s32(int32_T in0, int32_T in1, uint32_T *ptrOutBitsHi, uint32_T *ptrOutBitsLo)
{
    uint32_T absIn0;
    uint32_T absIn1;
    uint32_T in0Lo;
    uint32_T in0Hi;
    uint32_T in1Hi;
    uint32_T productHiLo;
    uint32_T productLoHi;
    absIn0 = in0 < 0 ? ~(uint32_T)in0 + 1U : (uint32_T)in0;
    absIn1 = in1 < 0 ? ~(uint32_T)in1 + 1U : (uint32_T)in1;
    in0Hi = absIn0 >> 16U;
    in0Lo = absIn0 & 65535U;
    in1Hi = absIn1 >> 16U;
    absIn0 = absIn1 & 65535U;
    productHiLo = in0Hi * absIn0;
    productLoHi = in0Lo * in1Hi;
    absIn0 *= in0Lo;
    absIn1 = 0U;
    in0Lo = (productLoHi << 16U) + absIn0;
    if (in0Lo < absIn0) {
        absIn1 = 1U;
    }
    absIn0 = in0Lo;
    in0Lo += productHiLo << 16U;
    if (in0Lo < absIn0) {
        absIn1++;
    }
    absIn0 = (((productLoHi >> 16U) + (productHiLo >> 16U)) + in0Hi * in1Hi) + absIn1;
    if ((in0 != 0) && ((in1 != 0) && ((in0 > 0) != (in1 > 0)))) {
        absIn0 = ~absIn0;
        in0Lo = ~in0Lo;
        in0Lo++;
        if (in0Lo == 0U) {
            absIn0++;
        }
    }
    *ptrOutBitsHi = absIn0;
    *ptrOutBitsLo = in0Lo;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("mul_wide_s32",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("mul_wide_s32", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("mul_wide_s32", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"mul_wide_s32")


%if !ISFIELD(FixPtUtils,"mul_us32_hiSR")
%assign tmpRet = SETFIELD(FixPtUtils,"mul_us32_hiSR",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern uint32_T mul_us32_hiSR(int32_T a, int32_T b, uint32_T aShift);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
uint32_T mul_us32_hiSR(int32_T a, int32_T b, uint32_T aShift)
{
    uint32_T u32_chi;
    uint32_T u32_clo;
    mul_wide_s32(a, b, &u32_chi, &u32_clo);
    return (uint32_T)((int32_T)u32_chi >> aShift);
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("mul_us32_hiSR",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("mul_us32_hiSR", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("mul_us32_hiSR", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"mul_us32_hiSR")


%if !ISFIELD(FixPtUtils,"div_nde_s32_floor")
%assign tmpRet = SETFIELD(FixPtUtils,"div_nde_s32_floor",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
    return (((numerator < 0) != (denominator < 0)) && (numerator % denominator != 0) ? -1 : 0) + numerator / denominator;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("div_nde_s32_floor",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("div_nde_s32_floor", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("div_nde_s32_floor", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"div_nde_s32_floor")


%if !ISFIELD(FixPtUtils,"div_s32_floor")
%assign tmpRet = SETFIELD(FixPtUtils,"div_s32_floor",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern int32_T div_s32_floor(int32_T numerator, int32_T denominator);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
int32_T div_s32_floor(int32_T numerator, int32_T denominator)
{
    int32_T quotient;
    uint32_T absNumerator;
    uint32_T absDenominator;
    uint32_T tempAbsQuotient;
    boolean_T quotientNeedsNegation;
    if (denominator == 0) {
        quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;
/* Divide by zero handler */    } else {
        absNumerator = numerator < 0 ? ~(uint32_T)numerator + 1U : (uint32_T)numerator;
        absDenominator = denominator < 0 ? ~(uint32_T)denominator + 1U : (uint32_T)denominator;
        quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
        tempAbsQuotient = absNumerator / absDenominator;
        if (quotientNeedsNegation) {
            absNumerator %= absDenominator;
            if (absNumerator > 0U) {
                tempAbsQuotient++;
            }
        }
        quotient = quotientNeedsNegation ? -(int32_T)tempAbsQuotient : (int32_T)tempAbsQuotient;
    }
    return quotient;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("div_s32_floor",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("div_s32_floor", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("div_s32_floor", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"div_s32_floor")


%endfunction



%implements s22_b0_zzxtf_Outputs "C"

%function OutputsForTID(block, system, tid) Output
%if tid == 0
%assign ::GlobalCurrentTID = 0
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

boolean_T rtb_Compare;
uint8_T rtb_Gain_d;
real_T rtb_Gain;
boolean_T RelationalOperator6;
boolean_T RelationalOperator8;
boolean_T PumpACtrl;
int32_T PumpBOn;
int64m_T tmp;
int64m_T tmp_0;
uint32_T tmp_1;
uint32_T tmp_2;
int96m_T tmp_3;
int64m_T tmp_4;
int64m_T tmp_5;
int64m_T tmp_6;
int64m_T tmp_7;
int96m_T tmp_8;
int64m_T tmp_9;
int64m_T tmp_a;
int32_T u0_tmp;
static int64m_T tmp_b = { { 0U, 0U }/* chunks */ };
boolean_T guard1 = false;
%closefile localVarDecl
%assign tlcOutputsFcnOfS21B0 = OpaqueTLCBlockFcn("Outputs", 21, 0, 2, 6)
%assign tlcOutputsFcnOfS21B2 = OpaqueTLCBlockFcn("Outputs", 21, 2, 2, 6)
%assign tlcOutputsFcnOfS21B3 = OpaqueTLCBlockFcn("Outputs", 21, 3, 2, 6)
%assign tlcOutputsFcnOfS21B4 = OpaqueTLCBlockFcn("Outputs", 21, 4, 2, 6)
%assign tlcOutputsFcnOfS21B5 = OpaqueTLCBlockFcn("Outputs", 21, 5, 2, 6)
%assign tlcOutputsFcnOfS21B12 = OpaqueTLCBlockFcn("Outputs", 21, 12, 2, 6)
%assign tlcOutputsFcnOfS21B13 = OpaqueTLCBlockFcn("Outputs", 21, 13, 2, 6)
%assign tlcOutputsFcnOfS21B33 = OpaqueTLCBlockFcn("Outputs", 21, 33, 2, 6)
%assign tlcOutputsFcnOfS21B52 = OpaqueTLCBlockFcn("Outputs", 21, 52, 2, 6)
%assign tlcOutputsFcnOfS21B58 = OpaqueTLCBlockFcn("Outputs", 21, 58, 2, 6)
%assign tlcOutputsFcnOfS21B61 = OpaqueTLCBlockFcn("Outputs", 21, 61, 2, 6)
%assign tlcOutputsFcnOfS21B69 = OpaqueTLCBlockFcn("Outputs", 21, 69, 2, 6)
%assign tlcOutputsFcnOfS21B70 = OpaqueTLCBlockFcn("Outputs", 21, 70, 2, 6)
%assign tlcOutputsFcnOfS21B72 = OpaqueTLCBlockFcn("Outputs", 21, 72, 2, 6)
%assign tlcOutputsFcnOfS21B73 = OpaqueTLCBlockFcn("Outputs", 21, 73, 2, 6)
%assign tlcOutputsFcnOfS21B74 = OpaqueTLCBlockFcn("Outputs", 21, 74, 2, 6)
%assign tlcOutputsFcnOfS21B75 = OpaqueTLCBlockFcn("Outputs", 21, 75, 2, 6)
%assign tlcOutputsFcnOfS21B76 = OpaqueTLCBlockFcn("Outputs", 21, 76, 2, 6)
%assign tlcOutputsFcnOfS21B77 = OpaqueTLCBlockFcn("Outputs", 21, 77, 2, 6)
%assign tlcOutputsFcnOfS21B78 = OpaqueTLCBlockFcn("Outputs", 21, 78, 2, 6)
%assign tlcOutputsFcnOfS21B79 = OpaqueTLCBlockFcn("Outputs", 21, 79, 2, 6)
%assign tlcOutputsFcnOfS21B80 = OpaqueTLCBlockFcn("Outputs", 21, 80, 2, 6)
%assign tlcOutputsFcnOfS21B94 = OpaqueTLCBlockFcn("Outputs", 21, 94, 2, 6)
%assign tlcOutputsFcnOfS21B95 = OpaqueTLCBlockFcn("Outputs", 21, 95, 2, 6)
%assign tlcOutputsFcnOfS21B96 = OpaqueTLCBlockFcn("Outputs", 21, 96, 2, 6)
%assign tlcOutputsFcnOfS21B99 = OpaqueTLCBlockFcn("Outputs", 21, 99, 2, 6)
%assign tlcOutputsFcnOfS21B100 = OpaqueTLCBlockFcn("Outputs", 21, 100, 2, 6)
%assign tlcOutputsFcnOfS21B101 = OpaqueTLCBlockFcn("Outputs", 21, 101, 2, 6)
%assign tlcOutputsFcnOfS21B103 = OpaqueTLCBlockFcn("Outputs", 21, 103, 2, 6)
%assign tlcOutputsFcnOfS21B112 = OpaqueTLCBlockFcn("Outputs", 21, 112, 2, 6)
%assign tlcOutputsFcnOfS21B113 = OpaqueTLCBlockFcn("Outputs", 21, 113, 2, 6)
%assign tlcOutputsFcnOfS21B114 = OpaqueTLCBlockFcn("Outputs", 21, 114, 2, 6)
%assign tlcOutputsFcnOfS21B115 = OpaqueTLCBlockFcn("Outputs", 21, 115, 2, 6)
%assign tlcOutputsFcnOfS21B116 = OpaqueTLCBlockFcn("Outputs", 21, 116, 2, 6)
%assign tlcOutputsFcnOfS21B117 = OpaqueTLCBlockFcn("Outputs", 21, 117, 2, 6)
%assign tlcOutputsFcnOfS21B118 = OpaqueTLCBlockFcn("Outputs", 21, 118, 2, 6)
%assign tlcOutputsFcnOfS21B119 = OpaqueTLCBlockFcn("Outputs", 21, 119, 2, 6)
%if !WHITE_SPACE(tlcOutputsFcnOfS21B0)
/* {S!d600}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput' */
%<tlcOutputsFcnOfS21B0>\
%endif
/* {S!d602}Gain: '<S6>/Gain' */
rtb_Gain = floor(1000.0 * ATV_B.pai_BasicAnalogInput);
if (rtIsNaN(rtb_Gain) || rtIsInf(rtb_Gain)) {
    rtb_Gain = 0.0;
} else {
    rtb_Gain = fmod(rtb_Gain, 4.294967296E+9);
}
atv_xd1_key_ain = rtb_Gain < 0.0 ? -(int32_T)(uint32_T)-rtb_Gain : (int32_T)(uint32_T)rtb_Gain;
/* {E!d602}End of Gain: '<S6>/Gain' */

/* {S!d604}RelationalOperator: '<S30>/Compare' incorporates:
 *  Constant: '<S30>/Constant'
 */
atv_key_signal = (atv_xd1_key_ain > 500);
%if !WHITE_SPACE(tlcOutputsFcnOfS21B2)
/* {S!d606}S-Function (pdx_digital_input): '<S6>/pdx_DigitalInput' */
%<tlcOutputsFcnOfS21B2>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B3)
/* {S!d608}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput5' */
%<tlcOutputsFcnOfS21B3>\
%endif
/* {S!d610}Relay: '<S6>/Relay2' incorporates:
 *  Relay: '<S6>/Relay3'
 */
rtb_Gain = atvc_an_in_sel_th + atvc_an_in_sel_his;
if (atv_xc1_raw_ain >= rtb_Gain) {
    ATV_DW.Relay2_Mode = true;
} else {
    if (atv_xc1_raw_ain <= atvc_an_in_sel_th - atvc_an_in_sel_his) {
        ATV_DW.Relay2_Mode = false;
    }
}
atv_fwd_mode_in = !ATV_DW.Relay2_Mode;
/* {E!d610}End of Relay: '<S6>/Relay2' */
%if !WHITE_SPACE(tlcOutputsFcnOfS21B4)

/* {S!d612}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput6' */
%<tlcOutputsFcnOfS21B4>\
%endif
/* {S!d614}Relay: '<S6>/Relay3' */
if (atv_xc4_raw_ain >= rtb_Gain) {
    ATV_DW.Relay3_Mode = true;
} else {
    if (atv_xc4_raw_ain <= atvc_an_in_sel_th - atvc_an_in_sel_his) {
        ATV_DW.Relay3_Mode = false;
    }
}
atv_rwd_mode_in = !ATV_DW.Relay3_Mode;
%if !WHITE_SPACE(tlcOutputsFcnOfS21B5)
/* {S!d616}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput4' */
%<tlcOutputsFcnOfS21B5>\
%endif
/* {S!d628}Switch: '<S14>/Switch' incorporates:
 *  Constant: '<S16>/Lower Limit'
 *  Constant: '<S16>/Upper Limit'
 *  Logic: '<S16>/AND'
 *  RelationalOperator: '<S16>/Lower Test'
 *  RelationalOperator: '<S16>/Upper Test'
 */
if ((0.45 <= atv_xa3_brake_pedal_raw_ain) && (atv_xa3_brake_pedal_raw_ain <= 4.55)) {
    /* {S!d618}Saturate: '<S14>/Saturation' */
    if (atv_xa3_brake_pedal_raw_ain > 4.5) {
        rtb_Gain = 4.5;
    } else if (atv_xa3_brake_pedal_raw_ain < 0.5) {
        rtb_Gain = 0.5;
    } else {
        rtb_Gain = atv_xa3_brake_pedal_raw_ain;
    }
    /* {E!d618}End of Saturate: '<S14>/Saturation' */

    /* {S!d620}Gain: '<S14>/Gain' incorporates:
 *  Constant: '<S14>/Constant1'
 *  Sum: '<S14>/Add'
 */
    rtb_Gain = floor((rtb_Gain - 0.5) * 750.0);
    if (rtIsNaN(rtb_Gain)) {
        atv_brake_pedalX1000 = 0U;
    } else {
        atv_brake_pedalX1000 = (uint16_T)fmod(rtb_Gain, 65536.0);
    }
    /* {S!d624}Saturate: '<S14>/Saturation1' */
    if (atv_brake_pedalX1000 >= 1000) {
        /* {S!d622}Gain: '<S14>/Gain' */
        atv_brake_pedalX1000 = 1000U;
    }
    /* {E!d624}End of Saturate: '<S14>/Saturation1' */
} else {
    /* {S!d626}Gain: '<S14>/Gain' incorporates:
 *  Constant: '<S14>/Constant'
 */
    atv_brake_pedalX1000 = 0U;
}
/* {E!d628}End of Switch: '<S14>/Switch' */

/* {S!d630}Relay: '<S6>/Relay1' */
if (atv_brake_pedalX1000 >= (uint16_T)((uint32_T)atvc_brakePedalOn + atvc_brakePedalHis)) {
    ATV_DW.Relay1_Mode = true;
} else {
    if (atv_brake_pedalX1000 <= (uint16_T)((uint32_T)atvc_brakePedalOn - atvc_brakePedalHis)) {
        ATV_DW.Relay1_Mode = false;
    }
}
atv_brake_pedal_digital_in = ATV_DW.Relay1_Mode;
/* {E!d630}End of Relay: '<S6>/Relay1' */

/* {S!d632}Logic: '<S8>/Logical Operator3' incorporates:
 *  Logic: '<S6>/Logical Operator'
 *  Logic: '<S8>/Logical Operator1'
 *  Logic: '<S8>/Logical Operator2'
 *  Logic: '<S8>/Logical Operator4'
 */
ATV_B.LogicalOperator3 = ((!atv_za3_StartBtn_din) && ((!atv_fwd_mode_in) && (!atv_rwd_mode_in)) && atv_brake_pedal_digital_in);
/* {S!d636}RateTransition: '<Root>/Rate Transition4' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition4 = ATV_DW.RateTransition4_Buffer0;
    /* {S!d634}RateTransition: '<Root>/Rate Transition5' */
    ATV_B.RateTransition5 = ATV_DW.RateTransition5_Buffer0;
}
/* {E!d636}End of RateTransition: '<Root>/Rate Transition4' */

/* {S!d638}Chart: '<S8>/VSM' */
if (ATV_DW.temporalCounter_i1_ji < 127U) {
    ATV_DW.temporalCounter_i1_ji++;
}
if (ATV_DW.temporalCounter_i2_j < 63U) {
    ATV_DW.temporalCounter_i2_j++;
}
if (ATV_DW.temporalCounter_i3 < 255U) {
    ATV_DW.temporalCounter_i3++;
}
/* Gateway: loop_10ms/VSM */
/* During: loop_10ms/VSM */
if (ATV_DW.is_active_c3_ATV == 0U) {
    /* Entry: loop_10ms/VSM */
    ATV_DW.is_active_c3_ATV = 1U;
    /* Entry Internal: loop_10ms/VSM */
    /* Transition: '<S37>:4' */
    ATV_DW.is_c3_ATV = ATV_IN_SLEEP;
    /* Entry 'SLEEP': '<S37>:9' */
    atv_state_out = 1U;
    atv_sub_state_out = 0U;
    atv_wakelock_out = false;
    atv_en_dcdc_out = false;
} else {
    switch (ATV_DW.is_c3_ATV) {
      case ATV_IN_INIT:
        atv_state_out = 3U;
        atv_wakelock_out = true;
        atv_en_dcdc_out = true;
        /* During 'INIT': '<S37>:5' */
        if (!atv_key_signal) {
            /* Transition: '<S37>:17' */
            ATV_DW.is_c3_ATV = ATV_IN_PRE_SLEEP;
            ATV_DW.temporalCounter_i1_ji = 0U;
            /* Entry 'PRE_SLEEP': '<S37>:3' */
            atv_state_out = 2U;
            atv_sub_state_out = 0U;
        } else {
            if (ATV_DW.temporalCounter_i1_ji >= 100U) {
                /* Transition: '<S37>:22' */
                ATV_DW.is_c3_ATV = ATV_IN_KEY_ON;
                /* Entry 'KEY_ON': '<S37>:20' */
                /* Entry Internal 'KEY_ON': '<S37>:20' */
                /* Entry Internal 'HV_CTRL': '<S37>:34' */
                /* Transition: '<S37>:82' */
                ATV_DW.is_HV_CTRL = ATV_IN_HV_OFF;
                /* Entry 'HV_OFF': '<S37>:52' */
                /* Entry Internal 'CHG_CTRL': '<S37>:68' */
                /* Transition: '<S37>:67' */
                ATV_DW.is_CHG_CTRL = ATV_IN_CHG_OFF;
                ATV_DW.temporalCounter_i3 = 0U;
                /* Entry 'CHG_OFF': '<S37>:62' */
                ATV_B.chg_ctrl_out = false;
                ATV_B.hvm_ctrl_out = false;
                /* Entry Internal 'HEATER_CTRL': '<S37>:72' */
                /* Transition: '<S37>:74' */
                ATV_DW.is_HEATER_CTRL = ATV_IN_HEATER_OFF;
                /* Entry 'HEATER_OFF': '<S37>:69' */
                ATV_B.heater_ctrl_out = false;
                /* Entry Internal 'DRIVE_ENABLE': '<S37>:85' */
                /* Transition: '<S37>:91' */
                ATV_DW.is_DRIVE_ENABLE = ATV_IN_IDLE;
                /* Entry 'IDLE': '<S37>:87' */
                atv_state_out = 4U;
                ATV_B.en_inv_rear_out = false;
                ATV_B.en_inv_front_out = false;
                ATV_B.en_inv_gen_out = false;
                /* Entry Internal 'STARTTRIGGER': '<S37>:119' */
                /* Transition: '<S37>:115' */
                ATV_DW.is_STARTTRIGGER = ATV_IN_STARTTRIGGER_OFF;
            }
        }
        break;
      case ATV_IN_KEY_ON:
        %<(SLibCGCallSubFcn("ATV_KEY_ON", [], 2, 6, 0))>;
        break;
      case ATV_IN_PRE_SLEEP:
        atv_state_out = 2U;
        /* During 'PRE_SLEEP': '<S37>:3' */
        if (atv_key_signal) {
            /* Transition: '<S37>:19' */
            ATV_DW.is_c3_ATV = ATV_IN_INIT;
            ATV_DW.temporalCounter_i1_ji = 0U;
            /* Entry 'INIT': '<S37>:5' */
            atv_state_out = 3U;
            atv_sub_state_out = 0U;
            atv_wakelock_out = true;
            atv_en_dcdc_out = true;
        } else {
            if (ATV_DW.temporalCounter_i1_ji >= 25U) {
                /* Transition: '<S37>:16' */
                ATV_DW.is_c3_ATV = ATV_IN_SLEEP;
                /* Entry 'SLEEP': '<S37>:9' */
                atv_state_out = 1U;
                atv_sub_state_out = 0U;
                atv_wakelock_out = false;
                atv_en_dcdc_out = false;
            }
        }
        break;
      default:
        atv_state_out = 1U;
        atv_wakelock_out = false;
        atv_en_dcdc_out = false;
        /* During 'SLEEP': '<S37>:9' */
        if (atv_key_signal) {
            /* Transition: '<S37>:12' */
            ATV_DW.is_c3_ATV = ATV_IN_INIT;
            ATV_DW.temporalCounter_i1_ji = 0U;
            /* Entry 'INIT': '<S37>:5' */
            atv_state_out = 3U;
            atv_sub_state_out = 0U;
            atv_wakelock_out = true;
            atv_en_dcdc_out = true;
        }
        break;
    }
}
/* {E!d638}End of Chart: '<S8>/VSM' */
%if !WHITE_SPACE(tlcOutputsFcnOfS21B12)

/* {S!d640}S-Function (psc_cpu_loading): '<S1>/psc_CpuLoading' */
%<tlcOutputsFcnOfS21B12>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B13)
/* {S!d642}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage' */
%<tlcOutputsFcnOfS21B13>\
%endif
/* {S!d650}RateTransition: '<S1>/Rate Transition4' incorporates:
 *  RateTransition: '<Root>/Rate Transition10'
 *  RateTransition: '<Root>/Rate Transition6'
 *  RateTransition: '<Root>/Rate Transition7'
 */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition4_b = ATV_B.hvm_ctrl_out;
    /* {S!d644}RateTransition: '<S1>/Rate Transition' */
    ATV_B.RateTransition = ATV_B.hvp_ctrl_out;
    /* {S!d646}RateTransition: '<S1>/Rate Transition1' */
    ATV_B.RateTransition1 = ATV_B.chg_ctrl_out;
    /* {S!d648}RateTransition: '<S1>/Rate Transition2' */
    ATV_B.RateTransition2 = ATV_B.heater_ctrl_out;
    ATV_B.RateTransition6 = ATV_DW.RateTransition6_Buffer0;
    ATV_B.RateTransition7 = ATV_DW.RateTransition7_Buffer0;
    ATV_B.RateTransition10 = ATV_DW.RateTransition10_Buffer0;
}
/* {E!d650}End of RateTransition: '<S1>/Rate Transition4' */

/* {S!d652}Logic: '<S29>/Logical Operator' incorporates:
 *  Constant: '<S29>/atvc_socLimitSave'
 *  Constant: '<S8>/state_Const1'
 *  RelationalOperator: '<S29>/Relational Operator12'
 */
rtb_Compare = (80 <= atvc_socLimitSave);
/* {S!d654}RelationalOperator: '<S29>/Relational Operator4' incorporates:
 *  Constant: '<S29>/atvc_maxTempMotor'
 */
ATV_B.RelationalOperator4 = (ATV_B.RateTransition10 > atvc_maxTempMotor);
/* {S!d656}RelationalOperator: '<S29>/Relational Operator5' incorporates:
 *  Constant: '<S29>/atvc_minTempMotor'
 */
ATV_B.RelationalOperator5 = (ATV_B.RateTransition10 < atvc_minTempMotor);
/* {S!d658}RateTransition: '<Root>/Rate Transition8' incorporates:
 *  RateTransition: '<Root>/Rate Transition9'
 */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition8 = ATV_DW.RateTransition8_Buffer0;
    ATV_B.RateTransition9 = ATV_DW.RateTransition9_Buffer0;
}
/* {E!d658}End of RateTransition: '<Root>/Rate Transition8' */

/* {S!d660}RelationalOperator: '<S29>/Relational Operator6' incorporates:
 *  Constant: '<S29>/atvc_maxTempMotor'
 */
RelationalOperator6 = (ATV_B.RateTransition8 > atvc_maxTempMotor);
/* {S!d662}RelationalOperator: '<S29>/Relational Operator8' incorporates:
 *  Constant: '<S29>/atvc_maxTempInv'
 */
RelationalOperator8 = (ATV_B.RateTransition9 > atvc_maxTempInv);
/* {S!d664}RateTransition: '<Root>/Rate Transition11' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition11 = ATV_DW.RateTransition11_Buffer0;
}
/* {E!d664}End of RateTransition: '<Root>/Rate Transition11' */

/* {S!d666}Chart: '<S38>/PUMP LOGIC' incorporates:
 *  Constant: '<S29>/atvc_maxTempInv'
 *  Constant: '<S29>/atvc_maxTempMotor'
 *  Constant: '<S29>/atvc_minTempInv'
 *  Constant: '<S29>/atvc_minTempMotor'
 *  RelationalOperator: '<S29>/Relational Operator'
 *  RelationalOperator: '<S29>/Relational Operator1'
 *  RelationalOperator: '<S29>/Relational Operator2'
 *  RelationalOperator: '<S29>/Relational Operator3'
 *  RelationalOperator: '<S29>/Relational Operator7'
 *  RelationalOperator: '<S29>/Relational Operator9'
 */
if (ATV_DW.temporalCounter_i1_j < 65535U) {
    ATV_DW.temporalCounter_i1_j++;
}
/* Gateway: loop_10ms/COOLING SYSTEM/GestioneImpiantoRaffreddamento/PUMP LOGIC */
/* During: loop_10ms/COOLING SYSTEM/GestioneImpiantoRaffreddamento/PUMP LOGIC */
if (ATV_DW.is_active_c6_ATV == 0U) {
    /* Entry: loop_10ms/COOLING SYSTEM/GestioneImpiantoRaffreddamento/PUMP LOGIC */
    ATV_DW.is_active_c6_ATV = 1U;
    /* Entry Internal: loop_10ms/COOLING SYSTEM/GestioneImpiantoRaffreddamento/PUMP LOGIC */
    /* Entry 'PumpALogic': '<S40>:47' */
    ATV_DW.PumpStA = 0.0;
    /* Entry Internal 'PumpALogic': '<S40>:47' */
    /* Transition: '<S40>:56' */
    ATV_DW.is_PumpALogic = ATV_IN_Off;
    /* Entry 'Off': '<S40>:63' */
    PumpACtrl = false;
    /* Entry 'PumpBLogic': '<S40>:14' */
    ATV_DW.PumpStB = 0.0;
    /* Entry Internal 'PumpBLogic': '<S40>:14' */
    /* Transition: '<S40>:27' */
    ATV_DW.is_PumpBLogic = ATV_IN_Off;
    ATV_DW.temporalCounter_i1_j = 0U;
    /* Entry 'Off': '<S40>:24' */
    atv_dbg_pumpB_out = false;
    PumpBOn = 0;
} else {
    /* During 'PumpALogic': '<S40>:47' */
    if (ATV_DW.is_PumpALogic == ATV_IN_Off) {
        PumpACtrl = false;
        /* During 'Off': '<S40>:63' */
        if (ATV_DW.PumpStA == 1.0) {
            /* Transition: '<S40>:116' */
            ATV_DW.is_PumpALogic = ATV_IN_Run;
            /* Entry 'Run': '<S40>:54' */
            PumpACtrl = true;
        } else {
            ATV_DW.PumpStA = %<(SLibCGCallSubFcn("ATV_On", ["ATV_B.RateTransition7 > atvc_maxTempInv", "ATV_B.RateTransition6 > atvc_maxTempMotor"], 2, 6, 1))>;
        }
    } else {
        PumpACtrl = true;
        /* During 'Run': '<S40>:54' */
        if (ATV_DW.PumpStA == 0.0) {
            /* Transition: '<S40>:62' */
            ATV_DW.is_PumpALogic = ATV_IN_Off;
            /* Entry 'Off': '<S40>:63' */
            PumpACtrl = false;
        } else {
            ATV_DW.PumpStA = %<(SLibCGCallSubFcn("ATV_Off", ["ATV_B.RateTransition7 < atvc_minTempInv", "ATV_B.RateTransition6 < atvc_minTempMotor"], 2, 6, 2))>;
        }
    }
    /* During 'PumpBLogic': '<S40>:14' */
    switch (ATV_DW.is_PumpBLogic) {
      case ATV_IN_Off:
        atv_dbg_pumpB_out = false;
        PumpBOn = 0;
        /* During 'Off': '<S40>:24' */
        if (ATV_DW.PumpStB == 1.0) {
            /* Transition: '<S40>:29' */
            ATV_DW.is_PumpBLogic = ATV_IN_Run;
            /* Entry 'Run': '<S40>:28' */
            atv_dbg_pumpB_out = true;
            PumpBOn = 1;
        } else if (ATV_DW.temporalCounter_i1_j >= 50000U) {
            /* Transition: '<S40>:32' */
            ATV_DW.is_PumpBLogic = ATV_IN_Run60sec;
            ATV_DW.temporalCounter_i1_j = 0U;
            /* Entry 'Run60sec': '<S40>:22' */
            atv_dbg_pumpB_out = true;
            PumpBOn = 1;
        } else {
            ATV_DW.PumpStB = %<(SLibCGCallSubFcn("ATV_On", ["RelationalOperator8", "RelationalOperator6"], 2, 6, 4))>;
        }
        break;
      case ATV_IN_Run:
        atv_dbg_pumpB_out = true;
        PumpBOn = 1;
        /* During 'Run': '<S40>:28' */
        if (ATV_DW.PumpStB == 0.0) {
            /* Transition: '<S40>:25' */
            ATV_DW.is_PumpBLogic = ATV_IN_Off;
            ATV_DW.temporalCounter_i1_j = 0U;
            /* Entry 'Off': '<S40>:24' */
            atv_dbg_pumpB_out = false;
            PumpBOn = 0;
        } else {
            ATV_DW.PumpStB = %<(SLibCGCallSubFcn("ATV_Off", ["ATV_B.RateTransition9 < atvc_minTempInv", "ATV_B.RateTransition8 < atvc_minTempMotor"], 2, 6, 3))>;
        }
        break;
      default:
        atv_dbg_pumpB_out = true;
        PumpBOn = 1;
        /* During 'Run60sec': '<S40>:22' */
        if (ATV_DW.PumpStB == 1.0) {
            /* Transition: '<S40>:31' */
            /* Transition: '<S40>:34' */
            ATV_DW.is_PumpBLogic = ATV_IN_Run;
            /* Entry 'Run': '<S40>:28' */
            atv_dbg_pumpB_out = true;
        } else if (ATV_DW.temporalCounter_i1_j >= 9000U) {
            /* Transition: '<S40>:26' */
            ATV_DW.is_PumpBLogic = ATV_IN_Off;
            ATV_DW.temporalCounter_i1_j = 0U;
            /* Entry 'Off': '<S40>:24' */
            atv_dbg_pumpB_out = false;
            PumpBOn = 0;
        } else {
            ATV_DW.PumpStB = %<(SLibCGCallSubFcn("ATV_On", ["RelationalOperator8", "RelationalOperator6"], 2, 6, 5))>;
        }
        break;
    }
}
/* {E!d666}End of Chart: '<S38>/PUMP LOGIC' */

/* {S!d668}Switch: '<S38>/Switch' */
ATV_B.Switch = ((!rtb_Compare) && PumpACtrl);
/* {S!d674}RateTransition: '<S1>/Rate Transition3' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition3 = ATV_B.Switch;
    /* {S!d670}RateTransition: '<S1>/Rate Transition5' */
    ATV_B.RateTransition5_g = atv_dbg_pumpB_out;
    /* {S!d672}RateTransition: '<Root>/Rate Transition12' */
    ATV_B.RateTransition12 = ATV_DW.RateTransition12_Buffer0;
}
/* {E!d674}End of RateTransition: '<S1>/Rate Transition3' */

/* {S!d676}Relay: '<S39>/Relay1' */
if (ATV_B.RateTransition12 >= atvc_tempSwitchOnFan) {
    ATV_DW.Relay1_Mode_e = true;
} else {
    if (ATV_B.RateTransition12 <= atvc_tempSwitchOffFan) {
        ATV_DW.Relay1_Mode_e = false;
    }
}
/* {S!d690}Switch: '<S38>/Switch1' incorporates:
 *  Constant: '<S38>/FanOff'
 *  Logic: '<S39>/Logical Operator'
 *  Relay: '<S39>/Relay1'
 *  Switch: '<S39>/Switch1'
 */
if (rtb_Compare) {
    atv_dbg_FAN_out = 0.0;
} else if ((PumpBOn != 0) && ATV_DW.Relay1_Mode_e) {
    /* {S!d678}Sum: '<S39>/Add1' incorporates:
 *  Constant: '<S38>/atvc_tempSwitchOnFan'
 *  Switch: '<S39>/Switch1'
 */
    rtb_Gain_d = (uint8_T)(ATV_B.RateTransition12 - atvc_tempSwitchOnFan);
    /* {S!d680}Saturate: '<S39>/Saturation' incorporates:
 *  Switch: '<S39>/Switch1'
 */
    if (rtb_Gain_d >= 20) {
        rtb_Gain_d = 20U;
    }
    /* {E!d680}End of Saturate: '<S39>/Saturation' */

    /* {S!d682}Product: '<S39>/Product' incorporates:
 *  Constant: '<S39>/Constant'
 *  Switch: '<S39>/Switch1'
 */
    atv_dbg_FAN_out = (real_T)rtb_Gain_d / 20.0;
    /* {S!d684}Gain: '<S39>/Gain' incorporates:
 *  Constant: '<S39>/Constant1'
 *  DataTypeConversion: '<S39>/Data Type Conversion'
 *  Switch: '<S39>/Switch1'
 *  Switch: '<S41>/Switch2'
 */
    rtb_Gain = 0.01 * (real_T)atvc_dcMinFan;
    /* {S!d686}Switch: '<S41>/Switch' incorporates:
 *  RelationalOperator: '<S41>/UpperRelop'
 *  Switch: '<S39>/Switch1'
 *  Switch: '<S41>/Switch2'
 */
    if (atv_dbg_FAN_out < rtb_Gain) {
        atv_dbg_FAN_out = rtb_Gain;
    }
    /* {E!d686}End of Switch: '<S41>/Switch' */
} else {
    /* {S!d688}Switch: '<S39>/Switch1' incorporates:
 *  Constant: '<S39>/Ventola spenta'
 */
    atv_dbg_FAN_out = 0.0;
}
/* {E!d690}End of Switch: '<S38>/Switch1' */

/* {S!d692}Gain: '<S1>/Gain' */
rtb_Gain = floor(100.0 * atv_dbg_FAN_out);
if (rtIsNaN(rtb_Gain) || rtIsInf(rtb_Gain)) {
    rtb_Gain = 0.0;
} else {
    rtb_Gain = fmod(rtb_Gain, 256.0);
}
rtb_Gain_d = (uint8_T)(rtb_Gain < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-rtb_Gain : (int32_T)(uint8_T)rtb_Gain);
/* {E!d692}End of Gain: '<S1>/Gain' */

/* {S!d694}RelationalOperator: '<S9>/Compare' incorporates:
 *  Constant: '<S9>/Constant'
 */
rtb_Compare = (rtb_Gain_d > 0);
/* {S!d698}RateTransition: '<S1>/Rate Transition6' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    ATV_B.RateTransition6_p = rtb_Compare;
    /* {S!d696}RateTransition: '<S1>/Rate Transition7' */
    ATV_B.RateTransition7_p = rtb_Gain_d;
}
/* {E!d698}End of RateTransition: '<S1>/Rate Transition6' */
%if !WHITE_SPACE(tlcOutputsFcnOfS21B33)

/* {S!d700}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput1' */
%<tlcOutputsFcnOfS21B33>\
%endif
/* {S!d706}Switch: '<S13>/Switch' incorporates:
 *  Constant: '<S13>/Constant'
 *  Constant: '<S15>/Lower Limit'
 *  Constant: '<S15>/Upper Limit'
 *  Logic: '<S15>/AND'
 *  RelationalOperator: '<S15>/Lower Test'
 *  RelationalOperator: '<S15>/Upper Test'
 */
if ((0.45 <= atv_xa1_ain_throttle_raw) && (atv_xa1_ain_throttle_raw <= 4.55)) {
    /* {S!d702}Saturate: '<S13>/Saturation' */
    if (atv_xa1_ain_throttle_raw > 4.5) {
        rtb_Gain = 4.5;
    } else if (atv_xa1_ain_throttle_raw < 0.5) {
        rtb_Gain = 0.5;
    } else {
        rtb_Gain = atv_xa1_ain_throttle_raw;
    }
    /* {E!d702}End of Saturate: '<S13>/Saturation' */

    /* {S!d704}Gain: '<S13>/Gain' incorporates:
 *  Constant: '<S13>/Constant1'
 *  Sum: '<S13>/Add'
 */
    rtb_Gain = floor((rtb_Gain - 0.5) * 250.0);
    if (rtIsNaN(rtb_Gain)) {
        atv_throttleX1000 = 0U;
    } else {
        atv_throttleX1000 = (uint16_T)fmod(rtb_Gain, 65536.0);
    }
    /* {E!d704}End of Gain: '<S13>/Gain' */
} else {
    atv_throttleX1000 = 0U;
}
/* {E!d706}End of Switch: '<S13>/Switch' */

/* {S!d732}Switch: '<S43>/Switch5' incorporates:
 *  Constant: '<S43>/Constant2'
 *  Constant: '<S43>/Constant3'
 *  Switch: '<S43>/Switch1'
 */
if (ATV_B.en_inv_rear_out) {
    /* {S!d708}Switch: '<S43>/Switch4' incorporates:
 *  Constant: '<S47>/Constant'
 */
    ATV_B.Switch5 = 0U;
    /* {S!d710}Sum: '<S47>/Add1' incorporates:
 *  Constant: '<S31>/atvc_throttleNeutralPoint'
 *  Constant: '<S47>/Constant1'
 *  DataTypeConversion: '<S47>/Cast'
 *  Switch: '<S43>/Switch3'
 */
    PumpBOn = 1000 - atvc_throttleNeutralPoint;
    /* {S!d712}Gain: '<S47>/Gain2' incorporates:
 *  Switch: '<S43>/Switch3'
 */
    tmp_1 = 1000U;
    /* {S!d714}Sum: '<S47>/Add' incorporates:
 *  Constant: '<S31>/atvc_throttleNeutralPoint'
 *  DataTypeConversion: '<S47>/Cast'
 *  DataTypeConversion: '<S47>/Cast1'
 *  Switch: '<S43>/Switch3'
 */
    u0_tmp = atv_throttleX1000 - atvc_throttleNeutralPoint;
    /* {S!d722}Saturate: '<S47>/Saturation' incorporates:
 *  Sum: '<S47>/Add'
 *  Switch: '<S43>/Switch3'
 */
    if (u0_tmp > 1000) {
        /* {S!d716}Gain: '<S47>/Gain2' */
        tmp_2 = 1000U;
    } else if (u0_tmp < 0) {
        /* {S!d718}Gain: '<S47>/Gain2' */
        tmp_2 = 0U;
    } else {
        /* {S!d720}Gain: '<S47>/Gain2' */
        tmp_2 = (uint32_T)u0_tmp;
    }
    /* {E!d722}End of Saturate: '<S47>/Saturation' */

    /* {S!d724}Gain: '<S47>/Gain2' incorporates:
 *  Switch: '<S43>/Switch3'
 */
    sMultiWordMul(&tmp_1, 1, &tmp_2, 1, &tmp_0.chunks[0U], 2);
    /* {S!d726}Saturate: '<S47>/Saturation2' incorporates:
 *  Sum: '<S47>/Add1'
 *  Switch: '<S43>/Switch3'
 */
    if (PumpBOn < 1) {
        PumpBOn = 1;
    }
    /* {E!d726}End of Saturate: '<S47>/Saturation2' */

    /* {S!d728}Product: '<S47>/Divide3' incorporates:
 *  Switch: '<S43>/Switch3'
 */
    sLong2MultiWord(PumpBOn, &tmp_4.chunks[0U], 2);
    sMultiWordDivFloor(&tmp_0.chunks[0U], 2, &tmp_4.chunks[0U], 2, &tmp_3.chunks[0U], 3, &tmp_5.chunks[0U], 2, &tmp_6.chunks[0U], 2, &tmp_7.chunks[0U], 2);
    PumpBOn = MultiWord2sLong(&tmp_3.chunks[0U]);
    /* {S!d730}Saturate: '<S47>/Saturation1' incorporates:
 *  Product: '<S47>/Divide3'
 *  Switch: '<S43>/Switch3'
 */
    if (PumpBOn > 1000) {
        ATV_B.Switch1 = 1000U;
    } else if (PumpBOn < 0) {
        ATV_B.Switch1 = 0U;
    } else {
        ATV_B.Switch1 = (uint16_T)PumpBOn;
    }
    /* {E!d730}End of Saturate: '<S47>/Saturation1' */
} else {
    ATV_B.Switch5 = 0U;
    ATV_B.Switch1 = 0U;
}
/* {E!d732}End of Switch: '<S43>/Switch5' */

/* {S!d734}DataTypeConversion: '<S35>/Cast2' incorporates:
 *  Constant: '<S8>/atvc_velocityLimitRwd'
 *  Gain: '<S35>/Gain2'
 *  Product: '<S35>/Product2'
 */
ATV_B.Cast2 = (uint16_T)(int32_T)fmod((int32_T)floor(142.0 * (real_T)atvc_velocityLimitRwd * 0.001953125 * 303.25370753692243), 65536.0);
/* {S!d736}DataTypeConversion: '<S35>/Cast1' incorporates:
 *  Constant: '<S8>/atvc_velocityLimitFwd'
 *  Gain: '<S35>/Gain1'
 *  Product: '<S35>/Product'
 */
ATV_B.Cast1 = (uint16_T)(int32_T)fmod((int32_T)floor(142.0 * (real_T)atvc_velocityLimitFwd * 0.001953125 * 303.25370753692243), 65536.0);
%if !WHITE_SPACE(tlcOutputsFcnOfS21B52)
/* {S!d738}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage2' */
%<tlcOutputsFcnOfS21B52>\
%endif
/* {S!d740}Logic: '<S6>/Logical Operator1' incorporates:
 *  Constant: '<S6>/Constant'
 *  Constant: '<S6>/Constant2'
 *  RelationalOperator: '<S12>/Upper Test'
 *  Sum: '<S6>/Add'
 */
atv_fs1_in = (atv_throttleX1000 > (uint16_T)(atvc_throttleNeutralPoint + 20U));
%if !WHITE_SPACE(tlcOutputsFcnOfS21B58)
/* {S!d742}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage3' incorporates:
 *  Constant: '<S1>/atvc_maxDischCurr'
 *  Constant: '<S1>/atvc_maxRegenCurr'
 */
%<tlcOutputsFcnOfS21B58>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B61)
/* {S!d744}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput8' */
%<tlcOutputsFcnOfS21B61>\
%endif
/* {S!d746}Relay: '<S6>/Relay5' */
if (atv_xe4_raw_ain >= atvc_an_in_sel_th + atvc_an_in_sel_his) {
    ATV_DW.Relay5_Mode = true;
} else {
    if (atv_xe4_raw_ain <= atvc_an_in_sel_th - atvc_an_in_sel_his) {
        ATV_DW.Relay5_Mode = false;
    }
}
atv_4wd_din = !ATV_DW.Relay5_Mode;
/* {E!d746}End of Relay: '<S6>/Relay5' */

/* {S!d794}Switch: '<S31>/Switch4' incorporates:
 *  Constant: '<S31>/Constant2'
 *  Constant: '<S31>/Constant4'
 *  Switch: '<S31>/Switch3'
 */
if (atv_4wd_din) {
    /* {S!d792}Switch: '<S42>/Switch5' incorporates:
 *  Constant: '<S42>/Constant2'
 *  Constant: '<S42>/Constant3'
 *  Switch: '<S42>/Switch1'
 */
    if (ATV_B.en_inv_front_out) {
        /* {S!d790}Switch: '<S42>/Switch4' incorporates:
 *  Constant: '<S31>/atvc_throttleNeutralPoint'
 *  Constant: '<S45>/Constant'
 *  RelationalOperator: '<S42>/Relational Operator1'
 */
        if (atv_throttleX1000 >= atvc_throttleNeutralPoint) {
            ATV_B.Switch4 = 0U;
            /* {S!d748}Sum: '<S45>/Add1' incorporates:
 *  Constant: '<S45>/Constant'
 *  Constant: '<S45>/Constant1'
 *  DataTypeConversion: '<S45>/Cast'
 *  Switch: '<S42>/Switch3'
 */
            PumpBOn = 1000 - atvc_throttleNeutralPoint;
            /* {S!d750}Gain: '<S45>/Gain2' incorporates:
 *  Switch: '<S42>/Switch3'
 */
            tmp_1 = 1000U;
            /* {S!d752}Sum: '<S45>/Add' incorporates:
 *  DataTypeConversion: '<S45>/Cast'
 *  DataTypeConversion: '<S45>/Cast1'
 *  Switch: '<S42>/Switch3'
 */
            u0_tmp = atv_throttleX1000 - atvc_throttleNeutralPoint;
            /* {S!d760}Saturate: '<S45>/Saturation' incorporates:
 *  Sum: '<S45>/Add'
 *  Switch: '<S42>/Switch3'
 */
            if (u0_tmp > 1000) {
                /* {S!d754}Gain: '<S45>/Gain2' */
                tmp_2 = 1000U;
            } else if (u0_tmp < 0) {
                /* {S!d756}Gain: '<S45>/Gain2' */
                tmp_2 = 0U;
            } else {
                /* {S!d758}Gain: '<S45>/Gain2' */
                tmp_2 = (uint32_T)u0_tmp;
            }
            /* {E!d760}End of Saturate: '<S45>/Saturation' */

            /* {S!d762}Gain: '<S45>/Gain2' incorporates:
 *  Switch: '<S42>/Switch3'
 */
            sMultiWordMul(&tmp_1, 1, &tmp_2, 1, &tmp.chunks[0U], 2);
            /* {S!d764}Saturate: '<S45>/Saturation2' incorporates:
 *  Sum: '<S45>/Add1'
 *  Switch: '<S42>/Switch3'
 */
            if (PumpBOn < 1) {
                PumpBOn = 1;
            }
            /* {E!d764}End of Saturate: '<S45>/Saturation2' */

            /* {S!d766}Product: '<S45>/Divide3' incorporates:
 *  Switch: '<S42>/Switch3'
 */
            sLong2MultiWord(PumpBOn, &tmp_6.chunks[0U], 2);
            sMultiWordDivFloor(&tmp.chunks[0U], 2, &tmp_6.chunks[0U], 2, &tmp_8.chunks[0U], 3, &tmp_7.chunks[0U], 2, &tmp_9.chunks[0U], 2, &tmp_a.chunks[0U], 2);
            PumpBOn = MultiWord2sLong(&tmp_8.chunks[0U]);
            /* {S!d768}Saturate: '<S45>/Saturation1' incorporates:
 *  Product: '<S45>/Divide3'
 *  Switch: '<S42>/Switch3'
 */
            if (PumpBOn > 1000) {
                ATV_B.Switch3 = 1000U;
            } else if (PumpBOn < 0) {
                ATV_B.Switch3 = 0U;
            } else {
                ATV_B.Switch3 = (uint16_T)PumpBOn;
            }
            /* {E!d768}End of Saturate: '<S45>/Saturation1' */
        } else {
            /* {S!d770}Gain: '<S44>/Gain2' */
            tmp_1 = 1000U;
            /* {S!d772}Sum: '<S44>/Add' incorporates:
 *  DataTypeConversion: '<S44>/Cast'
 *  DataTypeConversion: '<S44>/Cast1'
 */
            PumpBOn = atvc_throttleNeutralPoint - atv_throttleX1000;
            /* {S!d780}Saturate: '<S44>/Saturation' */
            if (PumpBOn > 1000) {
                /* {S!d774}Gain: '<S44>/Gain2' */
                tmp_2 = 1000U;
            } else if (PumpBOn < 0) {
                /* {S!d776}Gain: '<S44>/Gain2' */
                tmp_2 = 0U;
            } else {
                /* {S!d778}Gain: '<S44>/Gain2' */
                tmp_2 = (uint32_T)PumpBOn;
            }
            /* {E!d780}End of Saturate: '<S44>/Saturation' */

            /* {S!d782}Gain: '<S44>/Gain2' */
            sMultiWordMul(&tmp_1, 1, &tmp_2, 1, &tmp.chunks[0U], 2);
            /* {S!d784}Product: '<S44>/Divide3' incorporates:
 *  DataTypeConversion: '<S44>/Cast1'
 */
            if (atvc_throttleNeutralPoint == 0) {
                tmp_5 = tmp_b;
                if (sMultiWordGe(&tmp.chunks[0U], &tmp_5.chunks[0U], 2)) {
                    PumpBOn = MAX_int32_T;
                } else {
                    PumpBOn = MIN_int32_T;
                }
            } else {
                sLong2MultiWord(atvc_throttleNeutralPoint, &tmp_5.chunks[0U], 2);
                sMultiWordDivFloor(&tmp.chunks[0U], 2, &tmp_5.chunks[0U], 2, &tmp_8.chunks[0U], 3, &tmp_6.chunks[0U], 2, &tmp_7.chunks[0U], 2, &tmp_9.chunks[0U], 2);
                PumpBOn = MultiWord2sLong(&tmp_8.chunks[0U]);
            }
            /* {S!d786}Saturate: '<S44>/Saturation1' incorporates:
 *  Product: '<S44>/Divide3'
 */
            if (PumpBOn > 1000) {
                ATV_B.Switch4 = 1000U;
            } else if (PumpBOn < 0) {
                ATV_B.Switch4 = 0U;
            } else {
                ATV_B.Switch4 = (uint16_T)PumpBOn;
            }
            /* {E!d786}End of Saturate: '<S44>/Saturation1' */

            /* {S!d788}Switch: '<S42>/Switch3' incorporates:
 *  Constant: '<S44>/Constant'
 */
            ATV_B.Switch3 = 0U;
        }
        /* {E!d790}End of Switch: '<S42>/Switch4' */
    } else {
        ATV_B.Switch4 = 0U;
        ATV_B.Switch3 = 0U;
    }
    /* {E!d792}End of Switch: '<S42>/Switch5' */
} else {
    ATV_B.Switch4 = 0U;
    ATV_B.Switch3 = 0U;
}
/* {E!d794}End of Switch: '<S31>/Switch4' */
%if !WHITE_SPACE(tlcOutputsFcnOfS21B69)

/* {S!d796}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage4' */
%<tlcOutputsFcnOfS21B69>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B70)
/* {S!d798}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage5' incorporates:
 *  Constant: '<S1>/atvc_maxDischCurr'
 *  Constant: '<S1>/atvc_maxRegenCurr'
 */
%<tlcOutputsFcnOfS21B70>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B72)
/* {S!d800}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B72>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B73)
/* {S!d802}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput1' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B73>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B74)
/* {S!d804}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput3' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B74>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B75)
/* {S!d806}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput4' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B75>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B76)
/* {S!d808}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput5' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B76>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B77)
/* {S!d810}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput6' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B77>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B78)
/* {S!d812}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput7' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B78>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B79)
/* {S!d814}S-Function (pdx_digital_output): '<S5>/pdx_DigitalOutput8' */
%<tlcOutputsFcnOfS21B79>\
%endif
/* {S!d816}Gain: '<S5>/Gain' */
ATV_B.Saturation = 0.01 * atv_dbg_FAN_out;
/* {S!d822}Saturate: '<S5>/Saturation' */
if (ATV_B.Saturation > 1.0) {
    /* {S!d818}Gain: '<S5>/Gain' */
    ATV_B.Saturation = 1.0;
} else {
    if (ATV_B.Saturation < 0.0) {
        /* {S!d820}Gain: '<S5>/Gain' */
        ATV_B.Saturation = 0.0;
    }
}
/* {E!d822}End of Saturate: '<S5>/Saturation' */
%if !WHITE_SPACE(tlcOutputsFcnOfS21B80)

/* {S!d824}S-Function (pdx_pwm_output): '<S5>/pdx_PWMOutput' incorporates:
 *  Constant: '<S5>/Constant1'
 */
%<tlcOutputsFcnOfS21B80>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B94)
/* {S!d826}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput2' */
%<tlcOutputsFcnOfS21B94>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B95)
/* {S!d828}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput7' */
%<tlcOutputsFcnOfS21B95>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B96)
/* {S!d830}S-Function (pax_adc_input): '<S6>/pai_BasicAnalogInput3' */
%<tlcOutputsFcnOfS21B96>\
%endif
/* {S!d832}Gain: '<S6>/Gain2' */
rtb_Gain = floor(1000.0 * ATV_B.pai_BasicAnalogInput2);
if (rtIsNaN(rtb_Gain) || rtIsInf(rtb_Gain)) {
    rtb_Gain = 0.0;
} else {
    rtb_Gain = fmod(rtb_Gain, 4.294967296E+9);
}
atv_xe3_ain = rtb_Gain < 0.0 ? -(int32_T)(uint32_T)-rtb_Gain : (int32_T)(uint32_T)rtb_Gain;
/* {E!d832}End of Gain: '<S6>/Gain2' */

/* {S!d834}Relay: '<S6>/Relay4' */
if (atv_xe2_raw_ain >= atvc_an_in_sel_th + atvc_an_in_sel_his) {
    ATV_DW.Relay4_Mode = true;
} else {
    if (atv_xe2_raw_ain <= atvc_an_in_sel_th - atvc_an_in_sel_his) {
        ATV_DW.Relay4_Mode = false;
    }
}
atv_apu_req_in = !ATV_DW.Relay4_Mode;
/* {E!d834}End of Relay: '<S6>/Relay4' */
%if !WHITE_SPACE(tlcOutputsFcnOfS21B99)

/* {S!d836}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput' incorporates:
 *  Constant: '<Root>/Constant1'
 */
%<tlcOutputsFcnOfS21B99>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B100)
/* {S!d838}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput1' incorporates:
 *  Constant: '<Root>/Constant1'
 */
%<tlcOutputsFcnOfS21B100>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B101)
/* {S!d840}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput2' incorporates:
 *  Constant: '<Root>/Constant1'
 */
%<tlcOutputsFcnOfS21B101>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B103)
/* {S!d842}S-Function (pdx_digital_output): '<Root>/pdx_DigitalOutput3' incorporates:
 *  Constant: '<Root>/Constant'
 */
%<tlcOutputsFcnOfS21B103>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B112)
/* {S!d844}S-Function (psc_app_build_date): '<S25>/psc_AppBuildDate' */
%<tlcOutputsFcnOfS21B112>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B113)
/* {S!d846}S-Function (psc_app_version): '<S25>/psc_AppVersion' */
%<tlcOutputsFcnOfS21B113>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B114)
/* {S!d848}S-Function (psc_boot_build_date): '<S26>/psc_BootBuildDate' */
%<tlcOutputsFcnOfS21B114>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B115)
/* {S!d850}S-Function (psc_boot_version): '<S26>/psc_BootVersion' */
%<tlcOutputsFcnOfS21B115>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B116)
/* {S!d852}S-Function (psc_prg_build_date): '<S27>/psc_PrgBuildDate' */
%<tlcOutputsFcnOfS21B116>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B117)
/* {S!d854}S-Function (psc_prg_version): '<S27>/psc_PrgVersion' */
%<tlcOutputsFcnOfS21B117>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B118)
/* {S!d856}S-Function (psc_platform_build_date): '<S28>/psc_PlatformBuildDate' */
%<tlcOutputsFcnOfS21B118>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B119)
/* {S!d858}S-Function (psc_platform_version): '<S28>/psc_PlatformVersion' */
%<tlcOutputsFcnOfS21B119>\
%endif
/* {S!d860}Chart: '<S34>/VSMGestioneIbrido' incorporates:
 *  Constant: '<S68>/ATVC_iCEShutOff'
 *  RelationalOperator: '<S68>/Relational Operator'
 */
if (ATV_DW.temporalCounter_i1 < 511U) {
    ATV_DW.temporalCounter_i1++;
}
if (ATV_DW.temporalCounter_i2 < 2047U) {
    ATV_DW.temporalCounter_i2++;
}
/* Gateway: loop_10ms/HYBRID MANAGEMENT/VSMGestioneIbrido */
ATV_DW.ReqGen_prev = ATV_DW.ReqGen_start;
ATV_DW.ReqGen_start = atv_apu_req_in;
/* During: loop_10ms/HYBRID MANAGEMENT/VSMGestioneIbrido */
if (ATV_DW.is_active_c2_ATV == 0U) {
    ATV_DW.ReqGen_prev = atv_apu_req_in;
    /* Entry: loop_10ms/HYBRID MANAGEMENT/VSMGestioneIbrido */
    ATV_DW.is_active_c2_ATV = 1U;
    /* Entry Internal: loop_10ms/HYBRID MANAGEMENT/VSMGestioneIbrido */
    ATV_DW.is_active_MonitoraggioStatoICE = 1U;
    /* Entry 'MonitoraggioStatoICE': '<S66>:168' */
    /* Entry Internal 'MonitoraggioStatoICE': '<S66>:168' */
    /* Transition: '<S66>:179' */
    ATV_DW.is_MonitoraggioStatoICE = ATV_IN_iCEOff;
    /* Entry 'iCEOff': '<S66>:169' */
    ATV_DW.IceOn = false;
    ATV_DW.IceFault = false;
    ATV_DW.ShutDownHybrid = false;
    /* Entry Internal 'GestioneIbrido': '<S66>:166' */
    /* Transition: '<S66>:192' */
    ATV_DW.is_GestioneIbrido = ATV_IN_ProceduraAvviamento;
    /* Entry Internal 'ProceduraAvviamento': '<S66>:191' */
    /* Transition: '<S66>:108' */
    ATV_DW.is_ProceduraAvviamento = ATV_IN_StarterMode;
    /* Entry 'StarterMode': '<S66>:67' */
    /* Entry Internal 'StarterMode': '<S66>:67' */
    /* Transition: '<S66>:7' */
    ATV_DW.is_StarterMode = ATV_IN_Inizializzazione;
    /* Entry 'Inizializzazione': '<S66>:6' */
    ATV_DW.IceStatus = false;
} else {
    /* During 'MonitoraggioStatoICE': '<S66>:168' */
    guard1 = false;
    switch (ATV_DW.is_MonitoraggioStatoICE) {
      case ATV_IN_IceFault:
        /* During 'IceFault': '<S66>:171' */
        if (ATV_DW.temporalCounter_i2 >= 2000U) {
            /* Transition: '<S66>:213' */
            ATV_DW.is_MonitoraggioStatoICE = ATV_IN_iCEOff;
            /* Entry 'iCEOff': '<S66>:169' */
            ATV_DW.IceOn = false;
            ATV_DW.IceFault = false;
            ATV_DW.ShutDownHybrid = false;
        }
        break;
      case ATV_IN_iCEOff:
        /* During 'iCEOff': '<S66>:169' */
        if (ATV_DW.IceOn) {
            /* Transition: '<S66>:178' */
            ATV_DW.is_MonitoraggioStatoICE = ATV_IN_iCEOn;
            ATV_DW.temporalCounter_i2 = 0U;
            /* Entry 'iCEOn': '<S66>:170' */
        } else {
            ATV_DW.IceOn = false;
            ATV_DW.IceFault = false;
            ATV_DW.ShutDownHybrid = false;
        }
        break;
      default:
        /* During 'iCEOn': '<S66>:170' */
        if (ATV_DW.IceFault) {
            /* Transition: '<S66>:177' */
            if (!ATV_DW.IceFault) {
                /* Transition: '<S66>:190' */
                ATV_DW.is_MonitoraggioStatoICE = ATV_IN_iCEOn;
                ATV_DW.temporalCounter_i2 = 0U;
                /* Entry 'iCEOn': '<S66>:170' */
            } else if (ATV_DW.temporalCounter_i2 >= 100U) {
                /* Transition: '<S66>:176' */
                ATV_DW.is_MonitoraggioStatoICE = ATV_IN_IceFault;
                ATV_DW.temporalCounter_i2 = 0U;
                /* Entry 'IceFault': '<S66>:171' */
                ATV_DW.ShutDownHybrid = true;
            } else {
                guard1 = true;
            }
        } else {
            guard1 = true;
        }
        break;
    }
    if (guard1) {
        if (!atv_apu_req_in) {
            /* Transition: '<S66>:214' */
            ATV_DW.is_MonitoraggioStatoICE = ATV_IN_iCEOff;
            /* Entry 'iCEOff': '<S66>:169' */
            ATV_DW.IceOn = false;
            ATV_DW.IceFault = false;
            ATV_DW.ShutDownHybrid = false;
        } else {
            /* {S!d597}Outputs for Function Call SubSystem: '<S66>/MonitoraggioStatoICE.IceCheck' */
            /* Simulink Function 'IceCheck': '<S66>:174' */
            ATV_DW.IceFault = true;
            /* {E!d597}End of Outputs for SubSystem: '<S66>/MonitoraggioStatoICE.IceCheck' */
        }
    }
    /* During 'GestioneIbrido': '<S66>:166' */
    if (ATV_DW.is_GestioneIbrido == ATV_IN_ProceduraAvviamento) {
        %<(SLibCGCallSubFcn("ATV_ProceduraAvviamento", [], 2, 6, 6))>;
    } else {
        /* During 'ProceduraSpegnimento': '<S66>:193' */
        if ((ATV_DW.ReqGen_prev != ATV_DW.ReqGen_start) && ATV_DW.ReqGen_start && (!ATV_DW.ShutDownHybrid)) {
            /* Transition: '<S66>:211' */
            ATV_DW.is_GestioneIbrido = ATV_IN_ProceduraAvviamento;
            /* Entry Internal 'ProceduraAvviamento': '<S66>:191' */
            /* Transition: '<S66>:108' */
            ATV_DW.is_ProceduraAvviamento = ATV_IN_StarterMode;
            /* Entry 'StarterMode': '<S66>:67' */
            /* Entry Internal 'StarterMode': '<S66>:67' */
            /* Transition: '<S66>:7' */
            ATV_DW.is_StarterMode = ATV_IN_Inizializzazione;
            /* Entry 'Inizializzazione': '<S66>:6' */
            ATV_DW.IceStatus = false;
        }
    }
}
/* {E!d860}End of Chart: '<S34>/VSMGestioneIbrido' */
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutput0LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 1
%assign ::GlobalCurrentTID = 1
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T tmp;
%closefile localVarDecl
%assign _modelSS = ""

%assign tlcOutputsFcnOfS21B14 = OpaqueTLCBlockFcn("Outputs", 21, 14, 2, 7)
%assign tlcOutputsFcnOfS21B31 = OpaqueTLCBlockFcn("Outputs", 21, 31, 2, 7)
%assign tlcOutputsFcnOfS21B81 = OpaqueTLCBlockFcn("Outputs", 21, 81, 2, 7)
%assign tlcOutputsFcnOfS21B85 = OpaqueTLCBlockFcn("Outputs", 21, 85, 2, 7)
%assign tlcOutputsFcnOfS21B97 = OpaqueTLCBlockFcn("Outputs", 21, 97, 2, 7)
%if !WHITE_SPACE(tlcOutputsFcnOfS21B14)
/* {S!d862}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage1' */
%<tlcOutputsFcnOfS21B14>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B31)
/* {S!d864}S-Function (pcx_candb_transmit_message): '<S1>/pcx_CANdb_TransmitMessage6' */
%<tlcOutputsFcnOfS21B31>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B81)
/* {S!d866}S-Function (pcx_candb_receive_message): '<S3>/pcx_CANdb_ReceiveMessage' */
%<tlcOutputsFcnOfS21B81>\
%endif
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[0], "Output",1)
/* {S!d868}Chart: '<S3>/Chart' */
%if SLibCG_SystemFcnArgAccessed("ATV_Chart",0,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_Chart", ["%<_modelSS>", "ATV_B.pcx_CANdb_ReceiveMessage_o2", "&ATV_B.sf_Chart", "&ATV_DW.sf_Chart"], 0, 0, 7, 1, 7, 21)>\


%endif
/* {S!d870}Switch: '<S3>/Switch1' */
atv_v_dbg_chg_req = (ATV_B.sf_Chart.out && (ATV_B.pcx_CANdb_ReceiveMessage_o5 != 0.0));
/* {S!d872}Switch: '<S3>/Switch2' */
atv_v_dbg_heater_req = (ATV_B.sf_Chart.out && (ATV_B.pcx_CANdb_ReceiveMessage_o6 != 0.0));
%if !WHITE_SPACE(tlcOutputsFcnOfS21B85)
/* {S!d874}S-Function (pcx_candb_receive_message): '<S4>/pcx_CANdb_ReceiveMessage' */
%<tlcOutputsFcnOfS21B85>\
%endif
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[0], "Output",1)
/* {S!d876}Chart: '<S4>/Chart' */
%if SLibCG_SystemFcnArgAccessed("ATV_Chart",0,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("ATV_Chart", ["%<_modelSS>", "ATV_B.pcx_CANdb_ReceiveMessage_o2_d", "&ATV_B.sf_Chart_b", "&ATV_DW.sf_Chart_b"], 0, 1, 7, 1, 7, 21)>\


%endif
/* {S!d878}Switch: '<S4>/Switch' incorporates:
 *  Constant: '<S4>/Constant'
 *  Constant: '<S4>/Constant1'
 *  Constant: '<S4>/Constant2'
 *  Constant: '<S4>/Constant3'
 *  Constant: '<S4>/Constant4'
 *  Constant: '<S4>/Constant5'
 *  Constant: '<S4>/Constant6'
 *  Switch: '<S4>/Switch1'
 *  Switch: '<S4>/Switch2'
 *  Switch: '<S4>/Switch3'
 *  Switch: '<S4>/Switch4'
 *  Switch: '<S4>/Switch5'
 *  Switch: '<S4>/Switch6'
 */
if (ATV_B.sf_Chart_b.out) {
    tmp = floor(ATV_B.pcx_CANdb_ReceiveMessage_o4_k);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
    } else {
        tmp = fmod(tmp, 256.0);
    }
    ATV_B.atv_v_dbg_T_FMot = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
    tmp = floor(ATV_B.pcx_CANdb_ReceiveMessage_o5_c);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
    } else {
        tmp = fmod(tmp, 256.0);
    }
    ATV_B.atv_v_dbg_T_FInv = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
    tmp = floor(ATV_B.pcx_CANdb_ReceiveMessage_o7);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
    } else {
        tmp = fmod(tmp, 256.0);
    }
    ATV_B.atv_v_dbg_T_RMot = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
    tmp = floor(ATV_B.pcx_CANdb_ReceiveMessage_o6_o);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
    } else {
        tmp = fmod(tmp, 256.0);
    }
    ATV_B.atv_v_dbg_T_RInv = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
    tmp = floor(ATV_B.pcx_CANdb_ReceiveMessage_o8);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
    } else {
        tmp = fmod(tmp, 256.0);
    }
    ATV_B.atv_v_dbg_T_GMot = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
    tmp = floor(ATV_B.pcx_CANdb_ReceiveMessage_o9);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
    } else {
        tmp = fmod(tmp, 256.0);
    }
    ATV_B.atv_v_dbg_T_GInv = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
    tmp = floor(ATV_B.pcx_CANdb_ReceiveMessage_o10);
    if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
    } else {
        tmp = fmod(tmp, 256.0);
    }
    ATV_B.atv_v_dbg_T_Rad = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
} else {
    ATV_B.atv_v_dbg_T_FMot = 0U;
    ATV_B.atv_v_dbg_T_FInv = 0U;
    ATV_B.atv_v_dbg_T_RMot = 0U;
    ATV_B.atv_v_dbg_T_RInv = 0U;
    ATV_B.atv_v_dbg_T_GMot = 0U;
    ATV_B.atv_v_dbg_T_GInv = 0U;
    ATV_B.atv_v_dbg_T_Rad = 0U;
}
/* {E!d878}End of Switch: '<S4>/Switch' */
%if !WHITE_SPACE(tlcOutputsFcnOfS21B97)

/* {S!d880}S-Function (pcx_candb_receive_message): '<S2>/pcx_CANdb_ReceiveMessage' */
%<tlcOutputsFcnOfS21B97>\
%endif
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutput1LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 2
%assign ::GlobalCurrentTID = 2
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%assign tlcOutputsFcnOfS21B107 = OpaqueTLCBlockFcn("Outputs", 21, 107, 2, 8)
%assign tlcOutputsFcnOfS21B108 = OpaqueTLCBlockFcn("Outputs", 21, 108, 2, 8)
%assign tlcOutputsFcnOfS21B109 = OpaqueTLCBlockFcn("Outputs", 21, 109, 2, 8)
%assign tlcOutputsFcnOfS21B110 = OpaqueTLCBlockFcn("Outputs", 21, 110, 2, 8)
%assign tlcOutputsFcnOfS21B111 = OpaqueTLCBlockFcn("Outputs", 21, 111, 2, 8)
%if !WHITE_SPACE(tlcOutputsFcnOfS21B107)
/* S-Function (psc_cpu_loading): '<S24>/psc_CpuLoading1' */
%<tlcOutputsFcnOfS21B107>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B108)
/* S-Function (psc_stack_used): '<S24>/psc_StackUsed' */
%<tlcOutputsFcnOfS21B108>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B109)
/* S-Function (pkn_task_duration): '<S24>/pkn_TaskDuration1' */
%<tlcOutputsFcnOfS21B109>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B110)
/* S-Function (psc_cpu_loading): '<S24>/psc_CpuLoading2' */
%<tlcOutputsFcnOfS21B110>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS21B111)
/* S-Function (pkn_task_duration): '<S24>/pkn_TaskDuration2' */
%<tlcOutputsFcnOfS21B111>\
%endif
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutput2LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
%function OutputsFcnProtoTypeForTID(block, system, tid) Output
%if tid == 0
%assign ::GlobalCurrentTID = 0
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs0(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(2, 6, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 1
%assign ::GlobalCurrentTID = 1
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs1(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(2, 7, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 2
%assign ::GlobalCurrentTID = 2
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs2(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(2, 8, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
